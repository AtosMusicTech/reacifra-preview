/*! For license information please see app.js.LICENSE.txt */
(()=>{var t={362:(t,e,n)=>{"use strict";n.d(e,{A:()=>a});var r=n(354),i=n.n(r),s=n(314),o=n.n(s)()(i());o.push([t.id,":root{\n    --app-color: #a007ff;\n}\n\n.btn-primary {\n    background-color: var(--app-color) !important;\n    border-color: var(--app-color) !important;\n}","",{version:3,sources:["webpack://./src/app.css"],names:[],mappings:"AAAA;IACI,oBAAoB;AACxB;;AAEA;IACI,6CAA6C;IAC7C,yCAAyC;AAC7C",sourcesContent:[":root{\r\n    --app-color: #a007ff;\r\n}\r\n\r\n.btn-primary {\r\n    background-color: var(--app-color) !important;\r\n    border-color: var(--app-color) !important;\r\n}"],sourceRoot:""}]);const a=o},284:(t,e,n)=>{"use strict";n.d(e,{A:()=>d});var r=n(354),i=n.n(r),s=n(314),o=n.n(s),a=n(417),l=n.n(a),c=new URL(n(839),n.b),h=o()(i()),u=l()(c);h.push([t.id,`.cifra-preview {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    background-color: #01101D;\n}\n\n.cifra-preview .box {\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    top: 0px;\n    bottom: 0px;\n    left: 0px;\n    right: 0px;\n}\n\n.cifra-preview .box:before {\n    position: absolute;\n    content: '';\n    width: calc(100% + 30px);\n    height: calc(100% + 30px);\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%) scale(.7);\n    filter: blur(0);\n    opacity: 1;\n    transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1);\n}\n\n.cifra-preview .box:hover:before {\n    transform: translate(-50%, -50%) scale(1);\n    filter: blur(50px);\n}\n\n.cifra-preview .box-inner {\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\n\n.cifra-preview .box:before,\n.cifra-preview .box-inner {\n    background-color: #440099;\n    box-shadow: 2px 2px 12px 0 rgba(0, 0, 0, 0.58);\n    /* border-radius: 21px; */\n\n    background-image:\n        url(${u}),\n        url(${u}),\n        url(${u});\n    background-repeat: repeat-x;\n    background-size: 1600px 50%;\n    background-position: 0 130%, -50px 130%, 500px 130%;\n\n    animation: 20s waves linear infinite forwards;\n}\n\n@keyframes waves {\n    to {\n        background-position: 1600px 130%, 3150px 130%, 5300px 130%;\n    }\n}`,"",{version:3,sources:["webpack://./src/cifra/CifraAnime.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,WAAW;IACX,YAAY;IACZ,QAAQ;IACR,WAAW;IACX,SAAS;IACT,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,wBAAwB;IACxB,yBAAyB;IACzB,QAAQ;IACR,SAAS;IACT,0CAA0C;IAC1C,eAAe;IACf,UAAU;IACV,oDAAoD;AACxD;;AAEA;IACI,yCAAyC;IACzC,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;AAChB;;AAEA;;IAEI,yBAAyB;IACzB,8CAA8C;IAC9C,yBAAyB;;IAEzB;;;+CAG4e;IAC5e,2BAA2B;IAC3B,2BAA2B;IAC3B,mDAAmD;;IAEnD,6CAA6C;AACjD;;AAEA;IACI;QACI,0DAA0D;IAC9D;AACJ",sourcesContent:[".cifra-preview {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n    background-color: #01101D;\r\n}\r\n\r\n.cifra-preview .box {\r\n    position: fixed;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0px;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    right: 0px;\r\n}\r\n\r\n.cifra-preview .box:before {\r\n    position: absolute;\r\n    content: '';\r\n    width: calc(100% + 30px);\r\n    height: calc(100% + 30px);\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) scale(.7);\r\n    filter: blur(0);\r\n    opacity: 1;\r\n    transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1);\r\n}\r\n\r\n.cifra-preview .box:hover:before {\r\n    transform: translate(-50%, -50%) scale(1);\r\n    filter: blur(50px);\r\n}\r\n\r\n.cifra-preview .box-inner {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.cifra-preview .box:before,\r\n.cifra-preview .box-inner {\r\n    background-color: #440099;\r\n    box-shadow: 2px 2px 12px 0 rgba(0, 0, 0, 0.58);\r\n    /* border-radius: 21px; */\r\n\r\n    background-image:\r\n        url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' width='1600' height='198'%3e%3cdefs%3e%3clinearGradient id='a' x1='50%25' x2='50%25' y1='-10.959%25' y2='100%25'%3e%3cstop stop-color='%23fcc900' stop-opacity='.25' offset='0%25'/%3e%3cstop stop-color='%23fcc900' offset='100%25'/%3e%3c/linearGradient%3e%3c/defs%3e%3cpath fill='url(%23a)' fill-rule='evenodd' d='M.005 121C311 121 409.898-.25 811 0c400 0 500 121 789 121v77H0s.005-48 .005-77z'/%3e%3c/svg%3e\"),\r\n        url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' width='1600' height='198'%3e%3cdefs%3e%3clinearGradient id='a' x1='50%25' x2='50%25' y1='-10.959%25' y2='100%25'%3e%3cstop stop-color='%23fcc900' stop-opacity='.25' offset='0%25'/%3e%3cstop stop-color='%23fcc900' offset='100%25'/%3e%3c/linearGradient%3e%3c/defs%3e%3cpath fill='url(%23a)' fill-rule='evenodd' d='M.005 121C311 121 409.898-.25 811 0c400 0 500 121 789 121v77H0s.005-48 .005-77z'/%3e%3c/svg%3e\"),\r\n        url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' width='1600' height='198'%3e%3cdefs%3e%3clinearGradient id='a' x1='50%25' x2='50%25' y1='-10.959%25' y2='100%25'%3e%3cstop stop-color='%23fcc900' stop-opacity='.25' offset='0%25'/%3e%3cstop stop-color='%23fcc900' offset='100%25'/%3e%3c/linearGradient%3e%3c/defs%3e%3cpath fill='url(%23a)' fill-rule='evenodd' d='M.005 121C311 121 409.898-.25 811 0c400 0 500 121 789 121v77H0s.005-48 .005-77z'/%3e%3c/svg%3e\");\r\n    background-repeat: repeat-x;\r\n    background-size: 1600px 50%;\r\n    background-position: 0 130%, -50px 130%, 500px 130%;\r\n\r\n    animation: 20s waves linear infinite forwards;\r\n}\r\n\r\n@keyframes waves {\r\n    to {\r\n        background-position: 1600px 130%, 3150px 130%, 5300px 130%;\r\n    }\r\n}"],sourceRoot:""}]);const d=h},141:(t,e,n)=>{"use strict";n.d(e,{A:()=>a});var r=n(354),i=n.n(r),s=n(314),o=n.n(s)()(i());o.push([t.id,".cifra-view .marcador {\n    position: absolute;\n    background: red;\n    color: white;\n    padding: 2px 10px;\n    z-index: -1;\n    border-radius: 4px;\n    transition: top 0.2s, left 0.2s, width 0.2s, height 0.2s;\n    display: none;\n}\n\n.cifra-view pre {\n    padding-left: 15px;\n}\n\n.cifra-view .center {\n    position: fixed;\n    top: 50%;\n    left: 0px;\n    right: 0px;\n    height: 2px;\n    /* background-color: #333; */\n}\n\n.cifra-view b {\n    color: #f70;\n}\n\n.cifra-view.no-chords b {\n    color: #fff;\n    background-color: #fff;\n\n}\n\n.cifra-view.no-chords .marcador {\n    color: #fff;\n    background-color: #fff;\n\n}\n\n.cifra-view i {\n    background-color: #fffb39;\n    color: #555;\n    border: 1px solid #333;\n    font-style: normal;\n}\n\n.cifra-view .titulo {\n    font-size: 16px;\n    font-family: Roboto;\n    font-weight: bold;\n    background: var(--app-color);\n    /*\n* Created with https://www.css-gradient.com\n* Gradient link: https://www.css-gradient.com/?c1=5e21c7&c2=a33cd3&gt=l&gd=dtl\n*/\n    background: #5E21C7;\n    background: linear-gradient(135deg, #5E21C7, #A33CD3);\n    border-bottom-right-radius: 7px;\n    border-bottom-left-radius: 7px;\n    color: #fff;\n    padding: 10px;\n    margin-bottom: 30px;\n}\n\n.cifra-view .options {\n    margin-bottom: 30px;\n}\n\n.cifra-view .options .form-check {\n    margin: 5px;\n}","",{version:3,sources:["webpack://./src/cifra/CifraView.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,eAAe;IACf,YAAY;IACZ,iBAAiB;IACjB,WAAW;IACX,kBAAkB;IAClB,wDAAwD;IACxD,aAAa;AACjB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,QAAQ;IACR,SAAS;IACT,UAAU;IACV,WAAW;IACX,4BAA4B;AAChC;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,sBAAsB;;AAE1B;;AAEA;IACI,WAAW;IACX,sBAAsB;;AAE1B;;AAEA;IACI,yBAAyB;IACzB,WAAW;IACX,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,mBAAmB;IACnB,iBAAiB;IACjB,4BAA4B;IAC5B;;;CAGH;IACG,mBAAmB;IACnB,qDAAqD;IACrD,+BAA+B;IAC/B,8BAA8B;IAC9B,WAAW;IACX,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf",sourcesContent:[".cifra-view .marcador {\n    position: absolute;\n    background: red;\n    color: white;\n    padding: 2px 10px;\n    z-index: -1;\n    border-radius: 4px;\n    transition: top 0.2s, left 0.2s, width 0.2s, height 0.2s;\n    display: none;\n}\n\n.cifra-view pre {\n    padding-left: 15px;\n}\n\n.cifra-view .center {\n    position: fixed;\n    top: 50%;\n    left: 0px;\n    right: 0px;\n    height: 2px;\n    /* background-color: #333; */\n}\n\n.cifra-view b {\n    color: #f70;\n}\n\n.cifra-view.no-chords b {\n    color: #fff;\n    background-color: #fff;\n\n}\n\n.cifra-view.no-chords .marcador {\n    color: #fff;\n    background-color: #fff;\n\n}\n\n.cifra-view i {\n    background-color: #fffb39;\n    color: #555;\n    border: 1px solid #333;\n    font-style: normal;\n}\n\n.cifra-view .titulo {\n    font-size: 16px;\n    font-family: Roboto;\n    font-weight: bold;\n    background: var(--app-color);\n    /*\n* Created with https://www.css-gradient.com\n* Gradient link: https://www.css-gradient.com/?c1=5e21c7&c2=a33cd3&gt=l&gd=dtl\n*/\n    background: #5E21C7;\n    background: linear-gradient(135deg, #5E21C7, #A33CD3);\n    border-bottom-right-radius: 7px;\n    border-bottom-left-radius: 7px;\n    color: #fff;\n    padding: 10px;\n    margin-bottom: 30px;\n}\n\n.cifra-view .options {\n    margin-bottom: 30px;\n}\n\n.cifra-view .options .form-check {\n    margin: 5px;\n}"],sourceRoot:""}]);const a=o},884:(t,e,n)=>{"use strict";n.d(e,{A:()=>a});var r=n(354),i=n.n(r),s=n(314),o=n.n(s)()(i());o.push([t.id,".homepage .menu {\n    background: var(--app-color);\n    color: #fff;\n    border-bottom-right-radius: 10px;\n    border-bottom-left-radius: 10px;\n    margin-bottom: 20px;\n}\n\n.homepage .menu a{\n    color: #fff;\n}","",{version:3,sources:["webpack://./src/homepage/HomePage.css"],names:[],mappings:"AAAA;IACI,4BAA4B;IAC5B,WAAW;IACX,gCAAgC;IAChC,+BAA+B;IAC/B,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf",sourcesContent:[".homepage .menu {\r\n    background: var(--app-color);\r\n    color: #fff;\r\n    border-bottom-right-radius: 10px;\r\n    border-bottom-left-radius: 10px;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.homepage .menu a{\r\n    color: #fff;\r\n}"],sourceRoot:""}]);const a=o},314:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,s){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(o[l]=!0)}for(var c=0;c<t.length;c++){var h=[].concat(t[c]);r&&o[h[0]]||(void 0!==s&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=s),n&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=n):h[2]=n),i&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=i):h[4]="".concat(i)),e.push(h))}},e}},417:t=>{"use strict";t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},354:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(i," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},753:()=>{HTMLElement.prototype.get=function(){return this instanceof HTMLImageElement?this.getAttribute("src"):this instanceof HTMLLinkElement?this.getAttribute("href"):this instanceof HTMLInputElement&&"checkbox"==this.type||this instanceof HTMLInputElement&&"radio"==this.type?this.checked:this.value},HTMLPreElement.prototype.get=function(){return this.innerHTML},HTMLPreElement.prototype.set=function(t){this.innerHTML=t},HTMLElement.prototype.set=function(t){this instanceof HTMLImageElement?this.setAttribute("src",t):this instanceof HTMLLinkElement?this.setAttribute("href",t):this instanceof HTMLInputElement&&"checkbox"==this.type||this instanceof HTMLInputElement&&"radio"==this.type?this.checked=t:this.value=t}},72:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var s={},o=[],a=0;a<t.length;a++){var l=t[a],c=r.base?l[0]+r.base:l[0],h=s[c]||0,u="".concat(c," ").concat(h);s[c]=h+1;var d=n(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var f=i(p,r);r.byIndex=a,e.splice(a,0,{identifier:u,updater:f,references:1})}o.push(u)}return o}function i(t,e){var n=e.domAPI(e);n.update(t);return function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var s=r(t=t||[],i=i||{});return function(t){t=t||[];for(var o=0;o<s.length;o++){var a=n(s[o]);e[a].references--}for(var l=r(t,i),c=0;c<s.length;c++){var h=n(s[c]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}s=l}}},659:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},839:t=>{"use strict";t.exports="data:image/svg+xml;charset=UTF-8,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 width=%271600%27 height=%27198%27%3e%3cdefs%3e%3clinearGradient id=%27a%27 x1=%2750%25%27 x2=%2750%25%27 y1=%27-10.959%25%27 y2=%27100%25%27%3e%3cstop stop-color=%27%23fcc900%27 stop-opacity=%27.25%27 offset=%270%25%27/%3e%3cstop stop-color=%27%23fcc900%27 offset=%27100%25%27/%3e%3c/linearGradient%3e%3c/defs%3e%3cpath fill=%27url%28%23a%29%27 fill-rule=%27evenodd%27 d=%27M.005 121C311 121 409.898-.25 811 0c400 0 500 121 789 121v77H0s.005-48 .005-77z%27/%3e%3c/svg%3e"}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var s=e[r]={id:r,exports:{}};return t[r](s,s.exports,n),s.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{"use strict";const t=window,e=[];function r(t,n){if(null==t||"String"!=t.constructor.name||null==n)for(let t=0;t<arguments.length;t++){let n=arguments[t];const r=n.constructor.name;null==i(n)&&("Function"!=r&&"Object"!=r||(n=Object.freeze(n)),e.push(n))}else!function(t,n){n.name=t,e.push(n)}(t,n)}function i(t){return e.find((e=>e.name==t||e.constructor&&e.constructor.name==t))}function s(){return t.app}function o(){return t.location}class PiRandom{static#t=0;static generator(){return PiRandom.range(0,Number.MAX_VALUE)}static range(t,e){t=t||0,e=e||Number.MAX_VALUE;let n=Math.floor(Math.random()*(1+e-t))+t;return n>e?e:n}static uuid(t){let e=(new Date).getTime();return(t||"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx").replace(/[xy]/g,(function(t){let n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"==t?n:3&n|8).toString(16)}))+PiRandom.#t++}}r(PiRandom);class type_PiType{static isUndefined(t){return null!==t&&null==t}static typeof(t){let e=null;if(null==t||null==t||type_PiType.isNumber(t)){if(type_PiType.isNumber(t))return"Number";if(void 0===t)return"Undefined";if(null===t)return"Null"}else try{e=t.constructor.name,""==e&&(e="Object")}catch(t){}return e}static isNumber(t){return!("number"!=typeof t||!isFinite(t)||isNaN(t))}static isNullOrUndefined(t){return null==t||null==t}static isFunction(t){return"function"==typeof t}static isArray(t){return"Array"==type_PiType.typeof(t)||!("String"!=type_PiType.typeof(t)||!/^\[.*\]$/gi.test(t))}static isObject(t){return"Object"==type_PiType.typeof(t)||("object"==typeof t||!("String"!=type_PiType.typeof(t)||!/^\{.*\}$/gi.test(t)))}static isString(t){return"string"==typeof t}static isBoolean(t){return"boolean"==typeof t}}r(type_PiType);class PiString{static capital(t){if(!type_PiType.isString(t))return"";let e=(t=t.toLowerCase()).match(/(^[\s_\.-]*\w|[\s\._-]\w)+/gi);for(let n in e)t=t.replace(e[n],e[n].toUpperCase());return t}static last(t,e=" "){const n=t.split(e);return 0==n.length?t:n[n.length-1]}static first(t,e=" "){const n=t.split(e);return 0==n.length?t:n[0]}static format(t,...e){return t.replace(/{(\d+)}/g,(function(t,n){return void 0!==e[n]?e[n]:t}))}static clips(t,e,n){let r=[],i=-1;for(;i=t.indexOf(e,i+1),-1!=i;){i+=e.length;let s=t.indexOf(n,i+1);if(-1==s)break;r.push(t.substr(i,s-i)),i=s+1}return r}static isAlphaNumeric(t){let e,n;if(8==(t.which?t.which:t.keyCode))return!0;if(window.event)e=t.keyCode;else{if(!t.which)return!0;e=t.which}return n=String.fromCharCode(e),/[a-zA-Z0-9]/.test(n)}static space2nbsp(t){return null==t?"":t.replace(/\s/gi,"&nbsp;").replace(/\-/gi,"&nbsp;-&nbsp;")}static reticencias(t,e){return t.length>e?t.substring(0,e)+"...":t}static removeSpace(t){return(t||"").replace(/\s*/gi,"")}static firstWord(t){return type_PiType.isString(t)?t.split(" ")[0]:""}static lastWord(t){if(type_PiType.isString(t)){let e=t.split(" ");return e[e.length-1]}return""}static firstAndlastWord(t){let e=t.split(" "),n="";return 1==e.length?t:(n=t.split(" ")[0],n+" "+e[e.length-1])}static capital(t){if(!type_PiType.isString(t))return"";let e=(t=t.toLowerCase()).match(/(^[\s_\.-]*\w|[\s\._-]\w)+/gi);for(let n in e)t=t.replace(e[n],e[n].toUpperCase());return t}static replace(t,e,n){return t.replace(new RegExp(e,"g"),n)}static cut(t,e){if(!type_PiType.isString(t)||e<0)return t;let n=t.split(" "),r=[];r.push(n[0]),e>n.length&&(e=n.length);for(let t=1;t<e;t++)r.push(n[t]);return n.length>e&&r.push(n[n.length-1]),r.join(" ")}}r(PiString);class PiObject{static extendAndCall=function(){let t=arguments[0];for(let e=arguments.length-1;e>0;e--){let n=arguments[e];for(let e in n)"function"==typeof t[e]?t[e](n[e]):t[e]=n[e]}return t};static extractPropertyContext=function(t,e){let n=e.split(".");if(n.length>1)for(let e=0;e<n.length-1;e++){let r=n[e];null==t[r]&&(t[r]={}),t=t[r]}return t};static on=function(t,e,n,r=!0){let i=PiObject.extractValue(t,e),s=e.split(".");null==t.__onSetList&&(t.__onSetList=[],t.__onSetFn=[]),null==t.__onSetFn[e]&&(t.__onSetFn[e]=[]);if(!(void 0!==t.__onSetList.find((t=>t==e)))){const n=PiObject.extractPropertyContext(t,e),r=PiString.last(e,".");"length"==r&&PiType.isArray(n)||(Object.defineProperty(n,r,{set:function(n){i=n;const r=t.__onSetFn[e];for(let t=0;t<r.length;t++)r[t].cb(n,e);return n},get:function(){return i}}),t.__onSetList.push(e))}const o=PiRandom.uuid("xxx-xxx");let a=[o];if(t.__onSetFn[e].push({id:o,cb:n}),r&&s.length>1){s.pop();const e=PiObject.on(t,s.join("."),n);a=a.concat(e)}return a};static off=function(t,e){if(null!=t.__onSetFn)for(const n in t.__onSetFn){const r=t.__onSetFn[n];for(let t=0;t<r.length;t++){const n=r[t];e.find((t=>t==n.id))&&(t--,r.splice(t,1))}}};static extractValue=function(t,e){const n=e.split(".");if(n.length>1){for(let e=0;e<n.length&&null!=(t=t[n[e]]);e++);return t}return t[e]};static setProperty=function(t,e,n){const r=e.split(".");if(r.length>1){const e=r[r.length-1];for(let e=0;e<r.length-1&&null!=(t=t[r[e]]);e++);t[e]=n}else t[e]=n};static extend=function(){for(let t=1;t<arguments.length;t++){let e=arguments[t];for(let t in e)arguments[0][t]=e[t]}return arguments[0]}}const a={app:{parse:{enable:!0,selector:"body"}},html:{loader:"Carregando ..."},expression:{xlanguage:/(\{>?)([^\}]+)(\})/gi,xvariable:/(@)([\w\.]+)/gi,xhtml:/(\{>)([^\}]+)(\})/gi},history:{popstate:!1,prefixHashtag:!0},services:[],request:{fetch:null}};class PiConfig{static set(t,e){return PiObject.setProperty(a,t,e),PiConfig}static get(t){return PiObject.extractValue(a,t)}static load(t){return PiObject.extend(a,t),PiConfig}static extend(t,e=!1){return 0==e?PiObject.extend(a,t):PiObject.extend(a,{settings:e})}}const l=PiConfig;r(PiConfig);class PiClass{#e=null;constructor(...t){this.instances(...t),type_PiType.isObject(t[0])&&PiObject.extendAndCall(this,t[0]),this.#e=null==t[0]?{}:t[0],this.init(...t)}instances(){}get parameters(){return this.#e}inject(t){for(var e in t)this[e]=t[e];return this}init(){}jsonWillConvert(){}toJson(){this.jsonWillConvert();let t=JSON.parse(JSON.stringify(this));return this.jsonDidConvert(t),t}jsonDidConvert(t){}cloneWillLoad(){}clone(){this.cloneWillLoad();let t=this.toJson(),e=new this.constructor(t);return this.cloneDidLoad(e),e}cloneDidLoad(){}static create(...t){return new this(...t)}create(...t){return new this.constructor(...t)}}class PiDictionary{#n=[];add(t,e){return this.#n[t]=e,this}existKey(t){return null!=this.#n[t]}existValue(t){for(let e=this.#n.length-1;e>=0;e--)if(this.#n[e]==t)return!0;return!1}getValue(t){return this.#n[t]}remove(t){return delete this.#n[t],this}clear(){return this.#n=[],this}toArray(){return this.#n}}class PiAs{#r=new PiDictionary;add(){if(arguments.length<2)throw"PiAs: numero insulficiente de parametros";if(this.#r.existKey(arguments[0]))throw"PiAs: este apelido ja foi definido: "+arguments[0];let t="";for(let e=1;e<arguments.length;e++){let n=arguments[e];this.#r.existKey(n)?t+=this.#r.getValue(n):t+=n}return this.#r.add(arguments[0],t),!0}update(){if(arguments.length<2)throw"PiAs: numero insulficiente de parametros";if(this.#r.existKey(arguments[0]))return this.remove(arguments[0]),!1;let t="";for(let e=1;e<arguments.length;e++){let n=arguments[e];this.#r.existKey(n)?t+=this.#r.getValue(n):t+=n}return this.#r.add(arguments[0],t),!0}remove(t){return this.#r.remove(t),this}exist(t){return this.#r.existKey(t)}getValue(t){let e=this.#r.getValue(t);return 0==this.exist(t)?null:this.#r.existKey(e)?this.getValue(e):e}}class PiUrl extends PiClass{static alias=new PiAs;init(){let t=arguments,e="";for(let n=0;n<t.length;n++){let r=t[n];PiUrl.alias.exist(t[n])&&(r=PiUrl.alias.getValue(t[n])),"/"==r[0]&&"/"==e[e.length-1]?e+=r.substring(1):e+=r}this.setUrl(e)}setUrl(t){return PiUrl.alias.exist(t)&&(t=PiUrl.alias.getValue(t)),PiUrl.isValid(t)&&(this._url=t),this}scheme(){let t=this.getUrl(),e=t.indexOf(":");return e<0?"":t.substr(0,e)}host(t){let e=this.getUrl(),n=this._parse(e,"host");return void 0===t?n:(this.setUrl(e.replace(n,t)),this)}port(t){let e=this.getUrl(),n=this._parse(e,"port")||"";if(type_PiType.isUndefined(t))return n;let r=this.port()||"",i=this.href();return e=0==r.length?e.replace(i,i+":"+t):e.replace(n,t),this.setUrl(e),this}href(t){let e=this.host(),n=e,r=this._parse(this.getUrl(),"scheme");if(void 0===t){let t=this.port();return t=0==t.length?"":":"+t,n=r.length>0?r+"://"+e+t:e+t,n}return this.setUrl(t),this}hash(t){let e=this.getUrl(),n=this._parse(e,"hash");return void 0===t?n:(0==n.length?this.setUrl(e+"#"+t):this.setUrl(e.replace(n,t)),this)}appendPath(t){let e=this.getUrl();this._parse(e,"path");return PiUrl.alias.exist(t)&&(t=PiUrl.alias.getValue(t)),"/"!=e.substring(e.length-1)&&(e+="/"),this.setUrl(e+t),this}path(t){let e=this.getUrl(),n=this._parse(e,"path"),r="/"+n;return void 0===t?r:(PiUrl.alias.exist(t)&&(t=PiUrl.alias.getValue(t)),0==n.length?"/"!=e.substring(e.length-1)&&"/"!=t.charAt(0)?e+="/"+t:e+=t:e=e.replace(r,t),this.setUrl(e),this)}filename(t){let e=this.getUrl();if(void 0===t)return e.replace(/\\/g,"/").replace(/.*\//,"").replace(/\?.*/,"")||"";{let e=this.getUrl(),n=this.filename();return this.setUrl(e.replace(n,t)),this}}query(t){let e=this.getUrl(),n=this._parse(e,"query");if(void 0===t)return n;{let n=this.query();return this.setUrl(e.replace(n,t)),this}}addQuery(t,e){let n=this.query(),r=this.getUrl(),i=PiString.format("{1}={2}",r,t,encodeURIComponent(e));return 0==n.length?this.setUrl(r+"?"+i):this.setUrl(r+"&"+i),this}getQuery(t){let e=this.query().split("&");for(var n=0;n<e.length;n++){let r=e[n].split("=");if(r[0]==t)return decodeURIComponent(r[1])}return""}dirname(){return this.getUrl().replace(/\\/g,"/").replace(/\/[^\/]*$/,"")}getUrl(){return this._url||""}toString(){return this.getUrl()}_parse(t,e){let n=/^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/.exec(t||"");return null==n?"":n[{url:0,scheme:1,slash:2,host:3,port:4,path:5,query:6,hash:7}[e]]||""}static isValid(t){return/(http|https|)(:\/\/|)([\w-]+\.?)+[\w-]+(\/[\w- .\/?%&=]*)?/.test(t||"")}static add(){PiUrl.alias.add.apply(PiUrl.alias,arguments)}static get(t){return PiUrl.alias.getValue(t)}static to(){let e=arguments,n="";for(let t=0;t<arguments.length;t++){let r=e[t];PiUrl.alias.exist(e[t])&&(r=PiUrl.alias.getValue(e[t])),"/"==r[0]&&"/"==n[n.length-1]?n+=r.substring(1):n+=r}!function(e){t.location=e}(n)}static query(t){let e=PiUrl.create(o()).query().split("&");for(let n in e){let r=e[n].split("=");if(r[0]==t)return r[1]}}}r(PiUrl);class PiUrlHash{static _callbacks=[];static _fnWillChanges=[];static _fnDidChanges=[];#i=0;hashDidChange(){}listen(){return this.#i=PiRandom.uuid("xxx-xxx"),PiUrlHash._callbacks.push({id:this.#i,cb:()=>this.hashDidChange(PiUrlHash.get())}),this}unlisten(){const t=PiUrlHash._callbacks;for(let e=0;e<t.length;e++){if(t[e].id==this.#i)return PiUrlHash._callbacks.splice(e,1),this}return this}static get(){let t=o().hash;return t=0==t.length?t:t.substr(1),t}static to(t){let e=PiUrlHash.get(),n=e.indexOf("?");return n>-1?(n=e.substr(n),e=e.substr(0,n)):n="","!"+e==t||"!"+t==e?this:(n.length>0&&(t+=n),o().hash=t,PiUrlHash)}static getQueryString(t){let e=PiUrlHash.get().split("?");if(e.length<2)return"";let n=e[1].split("&");for(let e=0;e<n.length;e++){var r=n[e].split("=");if(r[0]==t)return decodeURIComponent(r[1])}return""}static getQueryInt(t){return parseInt(PiUrlHash.getQueryString(t))}static getQueryFloat(t){return parseFloat(PiUrlHash.getQueryString(t))}static removeQueryString(t){let e=PiUrlHash.get().split("?");if(null==t)return o().hash=e[0],PiUrlHash;let n=[],r=[];if(e.length>1){n=e[1].split("&");for(let t=0;t<n.length;t++){if(0==n[t].length)continue;let e=n[t].split("=");r[e[0]]=e[1]}}delete r[t];var i=[];for(const t in r)i.push(`${t}=${r[t]}`);return o().hash=`${e[0]}?${i.join("&")}`,PiUrlHash}static addQueryString(t,e=""){let n=PiUrlHash.get().split("?"),r=[],i=[];if(n.length>1){r=n[1].split("&");for(let t=0;t<r.length;t++){if(0==r[t].length)continue;let e=r[t].split("=");i[e[0]]=e[1]}}i[t]=e||"";var s=[];for(const t in i)s.push(`${t}=${i[t]}`);return o().hash=`${n[0]}?${s.join("&")}`,PiUrlHash}static add(...t){let e=PiUrlHash.get();e.length>0?PiUrlHash.to(e+"/"+t.join("/")):PiUrlHash.to(t.join("/"))}static remove(t){return o().hash=o().hash.replace(t,""),this}static onWillChange(t){PiUrlHash._fnWillChanges.push(t)}static onDidChange(t){PiUrlHash._fnDidChange.push(t)}}var c=null;t.onhashchange=function(){if(c==PiUrlHash.get())return;c=PiUrlHash.get();const t=PiUrlHash._callbacks;for(let t=0;t<PiUrlHash._fnWillChanges.length;t++)PiUrlHash._fnWillChanges[t](c);for(var e=0;e<t.length;e++)t[e].cb();for(let t=0;t<PiUrlHash._fnDidChanges.length;t++)PiUrlHash._fnDidChanges[t](c)},r(PiUrlHash),0==o().host.length?PiUrl.add("localhost","http://localhost"):PiUrl.add("localhost",PiUrl.create(o().toString()).href());class PiApp extends PiClass{page=null;services=[];_totalRouteNotFound=0;init(){super.init(),PiUrlHash.onWillChange((()=>{this._totalRouteNotFound=0}))}register(){for(let t=0;t<arguments.length;t++){r(arguments[t])}return this}addServices(){for(let t=0;t<arguments.length;t++){const e=arguments[t];e.onRouteNotFound((t=>{this._totalRouteNotFound++,this._totalRouteNotFound==this.services.length&&this.#s(t)})),this.services.push(e)}return this}startServices(){for(let t=0;t<this.services.length;t++){this.services[t].start()}return this}stopServices(){for(let t=0;t<this.services.length;t++){this.services[t].stop()}return this}setPage(t){return this.page&&this.page.destroy(),t.render(this.element),this.page=t,this}getPage(){return this.page}openModal(t){t.render(this.element,!0)}#s(t){for(let e=0;e<this.services.length;e++){const n=this.services[e];n.routeNotFound&&n.routeNotFound(t)}return this}}class PiTree{constructor(){}static parse(t){const e=new PiTree;t instanceof Element&&(t=t.innerHTML);const n=e._loadDocument(t);return e._loadElementRoot(n)}_loadDocument(e){try{return(new t.DOMParser).parseFromString(e,"text/html")}catch(t){console.log("PiTree: O html informado esta formatado incorretamente"),console.log(e)}return null}_loadElementRoot(t){if(null==t)return null;const e=document.createDocumentFragment(),n=[...t.getElementsByTagName("body")[0].children];for(let t=0;t<n.length;t++)e.appendChild(n[t]);return e}}class PiStatement{static exec(t,e){return PiStatement.execWithVariables(t,[[],[]],e)}static execWithVariables(t,e,n){const r=e[0],i=e[1];for(let e=0;e<r.length;e++){const n=r[e];"this"!=n?(r[e]=r[e].replaceAll(".",""),t=t.replaceAll(n,r[e])):(r.splice(e,1),e--)}return new Function("_this",...r,`return (function(){return ${t}}).call(_this);`)(n,...i)}}const h=new class PiTranslate{#o={};load(t){return PiObject.extend(this.#o,t),this}set(t,e){return this.#o[t]=e,this}get(t){return this.#o[t]||""}exist(t){return null!=this.#o[t]}clear(){return this.#o={},this}};const u={_all:[],register(t,e){this._all.push([t,e])},get all(){return this._all}};u.register("_",(function(){return h.get.apply(h,arguments)}));const d=u;class PiExpression{constructor(t){this._template=t,this._rxExpression=l.get("expression.xlanguage"),this._rxVariable=l.get("expression.xvariable"),this._load()}setDelimiters(t){return this._rxExpression=t,this}get all(){const t=[];for(let e=0;e<this._expressions.length;e++)t.push(this._clear(this._expressions[e].value));return t}get variables(){return null==this._variables&&(this._variables=this._extractAllVariables()),this._variables}parse(t,e=[[],[]]){let n=this._expressions,r=this._phrase;const i=Object.keys(t),s=Object.values(t);for(let e=0;e<s.length;e++){const n=s[e];n instanceof Function&&(s[e]=n.bind(t))}e[0]=i.concat(e[0]),e[1]=s.concat(e[1]);for(let t=0;t<d.all.length;t++){const n=d.all[t];e[0].push(n[0]),e[1].push(n[1])}for(let i=0;i<n.length;i++){const s=n[i],o=this._clear(s.value);let a=PiStatement.execWithVariables(o,e,t);type_PiType.isNumber(a)&&0==a?a="0":type_PiType.isObject(a)&&(a=JSON.stringify(a)),r=r.replace(s.key,type_PiType.isBoolean(a)?a:a||"")}return r}_load(){var{phrase:t,expressions:e}=this._extractPhraseAndExpressions();this._phrase=t,this._expressions=e}_clear(t){return(t=(t=t.replace(this._rxExpression,(function(t,e,n,r){return n}))).replace(this._rxVariable,(function(t,e,n,r){return n}))).trim()}_extractPhraseAndExpressions(){var t=[],e=1;return{phrase:this._template.replace(this._rxExpression,(function(n){const r=`_$${e++}_`;return t.push({value:n,key:r}),r})),expressions:t}}_extractAllVariables(){var t=this._template.match(this._rxVariable)||[];for(let e=0;e<t.length;e++){const n=t[e];t[e]=n.substr(1)}return t}_extractVariables(t){var e=t.match(this._rxVariable)||[];for(let t=0;t<e.length;t++){const n=e[t];e[t]=n.substr(1)}return e}_extractVariablesValues(t,e){const n=[];for(let r=0;r<t.length;r++){const i=t[r];n.push(PiObject.extractValue(e,i))}return n}}const p=/^(\w+)\s+in\s+range\(\s*(-?\d+)\s*\)$/gi,f=/^(\w+)\s+in\s+range\(\s*(-?\d+)\s*,\s*(-?\d+)\s*\)$/gi,m=/^(\w+)\s+in\s+range\(\s*(-?\d+)\s*,\s*(-?\d+)\s*,\s*(-?\d+)\s*\)$/gi,g=/^(\w+)\s+in\s+([0-9]+)$/gi,v=/^(\w+)\s+in\s+(\w+)$/gi;class PiForDirective{constructor(t){this._stmt=t,this._iterableCount=null,this._iterableProperty=null,this._iterableStart=0,this._iterableStep=1,this._indexName=null,this._loop=null,this._end=null,this._load()}get objectInterableName(){return this._iterableProperty}loop(t){return this._loop=t,this}end(t){return this._end=t,this}run(t=null){let e=0;if(null!=t?e=t:this._iterableCount&&(e=this._iterableCount),this._iterableStep<0)for(let t=this._iterableCount-this._iterableStart;t>=0;t+=this._iterableStep)this._loop(this._indexName,t);else for(let t=this._iterableStart;t<e;t+=this._iterableStep)this._loop(this._indexName,t);return this._end(),this}_loadNumber(t){const e=parseInt(t);type_PiType.isNumber(e)?(this._iterableCount=e,this._iterableProperty=null):(this._iterableCount=null,this._iterableProperty=t)}_load(){if(p.test(this._stmt))this._loadForRange1();else if(f.test(this._stmt))this._loadForRange2();else if(m.test(this._stmt))this._loadForRange3();else if(g.test(this._stmt))this._loadForLiteral();else{if(!v.test(this._stmt))throw`PiForDirective: Statement inválida para laço for = ${this._stmt}. Padrão esperado: (variável in literal) ou (variável in range(total[, inicio[, passo]]))`;this._loadForProperty()}}_loadForRange1(){this._stmt.replace(p,((t,e,n)=>(this._loadNumber(n),this._indexName=e,t)))}_loadForRange2(){this._stmt.replace(f,((t,e,n,r)=>(this._loadNumber(n),this._indexName=e,this._iterableStart=parseInt(r),t)))}_loadForRange3(){this._stmt.replace(m,((t,e,n,r,i)=>(this._loadNumber(n),this._indexName=e,this._iterableStart=parseInt(r),this._iterableStep=parseInt(i),t)))}_loadForProperty(){this._stmt.replace(v,((t,e,n)=>(this._loadNumber(n),this._indexName=e,t)))}_loadForLiteral(){this._stmt.replace(g,((t,e,n)=>(this._iterableCount=parseInt(n),this._indexName=e,t)))}}class PiFunction{static noop(){}}const b=/^\((\w+)\s*,\s*(\w+)\)\s+in\s+(\w+(\.\w+)*)$/gi;class PiForEachDirective{constructor(t,e={},n=PiFunction.noop){this._stmt=t,this._context=e,this._fn=n,this._end=PiFunction.noop,this._load()}get variableInterableName(){return this._variableInterableName}get objectInterableName(){return this._objectInterableName}loop(t){return this._fn=t,this}run(t=null,e=0,n=-1,r=1){const i=t||PiObject.extractValue(this._context,this._objectInterableName);if("Function"==i.constructor.name||"Object"==i.constructor.name){return new Function("_this","obj","vn","ixn","fn","for(const i in obj){fn(obj, i, vn, ixn);}")(this,i,this._variableInterableName,this._variableIndexName,this._fn),this._end(),this}const s=new Function("_this","arr","indexBegin","indexEnd","step","vn","ixn","fn","for(var i = indexBegin ; i < indexEnd ; i += step){fn(arr, i, vn, ixn);}");return-1==n&&(n=i.length),s(this,i,e,n,r,this._variableInterableName,this._variableIndexName,this._fn),this._end(),this}end(t){return this._end=t,this}_load(){b.test(this._stmt)?this._loadForeachIndexAndProperties():this._loadForeachProperties()}_loadForeachIndexAndProperties(){this._stmt.replace(b,((t,e,n,r)=>(this._variableInterableName=n,this._objectInterableName=r,this._variableIndexName=e,t)))}_loadForeachProperties(){const t=this._stmt,e=t.trim().split(" ");if(3!=e.length)throw`PiForEachDirective: Statement inválida para laço foreach = ${t}. Padrão esperado: [variável in iterável] ou [(index, variável) in iterável]`;this._variableIndexName=null,this._variableInterableName=e[0],this._objectInterableName=e[2]}}class PiArray{static addMethod(t,e,n){const r=[];null==t[e]?Object.defineProperty(t,e,{enumerable:!1,configurable:!1,writable:!1,value:function(...e){return n.call(t,...e),this}}):r.push(n)}}class PiPromise extends PiClass{#a=!1;#l=this.newPromise();instances(){this.clear()}static wait(t=null){var e=new PiPromise,n=0,r=!0,i=t||arguments;for(let t=0;t<i.length;t++)i[t].finally((()=>{++n==i.length&&(r?e.resolve():e.reject())})).catch((()=>{r=!1}));return e}get(){return this.#l}newPromise(){return new Promise(((t,e)=>{this.ok(t),this.error(e)}))}resolve(){return this._argOk=arguments,this._callOk(),this._callOnce(),this._callDone(),this.#a&&this.reset(),this}link(t){const e=this;return t.ok((function(){e.resolve.apply(e,arguments)})),t.error((function(){e.reject.apply(e,arguments)})),this}reject(){return this._argErr=arguments,this._callErr(),this._callDone(),this.#a&&this.reset(),this}ok(t,e){return this._cbOk.push({cb:t,context:e}),this._isOk&&this._callOk(),this}then(){return this.ok.apply(this,arguments)}once(t,e){return this._cbOnce.push({cb:t,context:e}),this._isOk&&this._callOnce(),this}error(t,e){return this._cbErr.push({cb:t,context:e}),this._isErr&&this._callErr(),this}catch(){return this.error.apply(this,arguments)}done(t,e){return this._cbDone.push({cb:t,context:e}),this._isDone&&this._callDone(),this}finally(){return this.done.apply(this,arguments)}reset(){return this._cbOk=[],this._cbErr=[],this._cbDone=[],this}clear(){return this._cbOk=[],this._cbErr=[],this._cbDone=[],this._cbOnce=[],this._isOk=!1,this._isErr=!1,this._isDone=!1,this._argOk=[],this._argErr=[],this}toPromise(){return this.#l}_call(t,e){for(let n=t.length-1;n>=0;n--)t[n].cb.apply(t[n].context,e)}_callOnce(){this._isOk=!0,this._call(this._cbOnce,this._argOk),this._cbOnce=[]}_callOk(){this._isOk=!0,this._call(this._cbOk,this._argOk)}_callErr(){this._isErr=!0,this._call(this._cbErr,this._argErr)}_callDone(){this._isDone=!0,this._call(this._cbDone,[])}}r(PiPromise);class PiElement{constructor(t,e={context:{}},n=null){this._element=t,this._attrNames=t.getAttributeNames(),this._destroyed=!1,this._directives=[],this._autoBind=!0,this._element._component=null,this._element._hasComponent=!1,this._element._componentParent=n,this._foreachContext={},this._defaultVariablesNames=[],this._defaultVariablesValues=[],this._scope=e,this._watchs=[],this._children=[],this._events={enter:this._eventEnter},this._orderAttributeNames(),this._loadDirectivesBase(),this._element._pie=!0}addForeachContext(t,e){return this._foreachContext[t]=e,this}setComponent(t){return this._element._hasComponent=!0,this._element._component=t,this}extendForeachContext(t){return PiObject.extend(this._foreachContext,t),this}watch(t,e){return this._addContextWatch(t,e),this}unWatch(t){return this._removeContextWatch(t),this}load(t){return this._loadDefaultVariables(),this._runDirectives(t),this._loadTemplate(),this}_loadDefaultVariables(){let t=Object.keys(this._foreachContext),e=Object.values(this._foreachContext),n=[],r=[];const i=this._element._componentParent;if(null!=i){n=Object.getOwnPropertyNames(i.__proto__);for(let t=0;t<n.length;t++)i[n[t]]instanceof Function&&r.push(i[n[t]].bind(i))}this._defaultVariablesNames=t.concat(n),this._defaultVariablesValues=e.concat(r)}addDirective(t,e){return this._directives[t]=e,this}existDirective(t){return null!=this._directives[t]}get $(){return this._$element?this._$element:this._$element=$(this._element)}on(t,e,...n){return this.listen(t,e,...n)}_eventEnter(t,...e){this._element.addEventListener("keyup",(n=>{13==n.keyCode&&t.apply(this,[n,...e])}))}_eventDefault(t,e,...n){this._element.addEventListener(t,(t=>{e.apply(this,[t,...n])}))}listen(t,e,...n){const r=this._events[t];return r?r.call(this,e,...n):this._eventDefault(t,e,...n),this}off(t,e){return this.unlisten(t,e)}unlisten(t,e){return this._element.removeEventListener(t,e),this}_dispose(){if(!this._destroyed){this._destroyed=!0,this._element.remove();for(let t=0;t<this._children.length;t++)this._children[t].destroy();return this._children=[],this}}destroy(){if(!this._destroyed)return this._dispose(),this._clearContextWatch(),this}insertBefore(t){return this._element.parentNode.insertBefore(t._element,this._element.nextElementSibling),this}insertAfter(t){return this._element.parentNode.insertBefore(t._element,this._element.nextSibling),this}append(t){return this._element.parentNode.append(t._element),this}addEventStatement(t,e,n){const r=new PiExpression(t);return this.listen(n,(function(t){const e=this._getContext(),n=this._getDefaultVariables();n[0].push("$event"),n[1].push(t);const i=r.parse(e,n);return PiStatement.execWithVariables(i,n,e)})),this}setChangeDirective(t){const e=new PiExpression(t);return this.listen("change",(function(t){const n=this._getContext(),r=this._getDefaultVariables();r[0].push("$event"),r[1].push(t);const i=e.parse(n,r);return PiStatement.execWithVariables(i,r,n)})),this}get value(){const t=this._element;return t instanceof HTMLInputElement&&"checkbox"==t.type||t instanceof HTMLInputElement&&"radio"==t.type?t.checked:t.value}set value(t){const e=this._element;return e instanceof HTMLInputElement&&("checkbox"==e.type||"radio"==e.type)?(e.checked=t,this):(e.value=t,this)}addBind(t,e,n){if(null!=t&&0!=t.length)return this._addBindToElementContext(t,n),this}get isDestroyed(){return this._destroyed}setInitDirective(t){const e=new PiExpression(t),n=this._getContext(),r=this._getDefaultVariables(),i=e.parse(n,r);return PiStatement.execWithVariables("this."+i,r,n),this}setModelDirective(t){let e="change";return this._element instanceof HTMLInputElement&&(e="keyup"),this._addBindToElementContext(t,e),this}setValueDirective(t){if(this._destroyed)return this;const e=new PiExpression(t),n=this._getContext();return this.value=e.parse(n,this._getDefaultVariables()),this}setSelectedDirective(t){if(this._destroyed)return this;const e=new PiExpression(t),n=this._getContext(),r=e.parse(n,this._getDefaultVariables());return!0===r||"true"===r?this._element.setAttribute("selected",!0):this._element.removeAttribute("selected"),this}setCheckedDirective(t){if(this._destroyed)return this;const e=new PiExpression(t),n=this._getContext(),r=e.variables;let i=e.parse(n,this._getDefaultVariables());if(this._element.checked="true"==i,r.length>0)for(let t=0;t<r.length;t++){const s=r[t];this._addContextWatch(s,(()=>{i=e.parse(n,this._getDefaultVariables()),this._element.checked="true"==i}))}}setSrcDirective(t){if(this._destroyed)return this;const e=new PiExpression(t),n=this._getContext(),r=e.variables;let i=e.parse(n,this._getDefaultVariables());if(this._element.setAttribute("src",i),r.length>0)for(let t=0;t<r.length;t++){const s=r[t];this._addContextWatch(s,(()=>{i=e.parse(n,this._getDefaultVariables()),this._element.setAttribute("src",i)}))}}setConditionalDirective(t){if(this._destroyed)return this;const e=new PiExpression(t),n=e.variables;if(this._updateConditional(e),n.length>0)for(let t=0;t<n.length;t++){const r=n[t];this._addContextWatch(r,(()=>{this._updateConditional(e)}))}}setDisabledDirective(t){if(this._destroyed)return this;const e=new PiExpression(t);this._updateDisabled(e);for(let t=0;t<e.variables.length;t++){const n=e.variables[t];this._addContextWatch(n,(()=>{this._updateDisabled(e)}))}return this}setStyleDirective(t){if(this._destroyed)return this;this._expressionStyle=new PiExpression(t),this._updateStyle();const e=this._expressionStyle.variables;for(let t=0;t<e.length;t++){const n=e[t];this._addContextWatch(n,(()=>{this._updateStyle()}))}return this}setClassDirective(t){if(this._destroyed)return this;this._expressionClass=new PiExpression(t),this._updateClass();const e=this._expressionClass.variables;for(let t=0;t<e.length;t++){const n=e[t];this._addContextWatch(n,(()=>{this._updateClass()}))}return this}setForDirective(t){const e=new PiExpression(t),n=this._getContext(),r=this._getDefaultVariables(),i=e.parse(n,r),s=new PiForDirective(i),o=this._getPiAttributeNodes([":for"]);let a=[],l=document.createTextNode("");if(this._element.parentNode.insertBefore(l,this._element.nextSibling),s.loop(((t,e)=>{const n=this._element.componentParent;this._setAttributeNodes(o);const r=this._element.cloneNode(!0),i=new PiElement(r,this._scope,n);i.extendForeachContext(this._foreachContext),i._autoBind=!1,i.addForeachContext(t,e),i.load(n);const s=new PiVirtualTree(r.children,this._scope,n);s.hook("did:create:velement",(t=>{i._children.push(t),t.extendForeachContext(i._foreachContext)})),s.load(),a.push(i)})).end((()=>{for(let t=a.length-1;t>=0;t--){const e=a[t]._element;l.parentNode.insertBefore(e,l.nextSibling)}})).run(),e.variables.length>0)for(let t=0;t<e.variables.length;t++){const n=e.variables[t];this._addContextWatch(n,(t=>{for(let t=0;t<a.length;t++)a[t].destroy();a=[],s.run(t)}))}return this._element.parentElement.dispatchEvent(new CustomEvent("fordone",{bubbles:!0,cancelable:!0,composed:!1})),this._dispose(),this}setForEachDirective(t){const e=new PiExpression(t),n=this._getContext(),r=this._getDefaultVariables(),s=e.parse(n,r),o=new PiForEachDirective(s),a=o.objectInterableName,l=this._getPiAttributeNodes([":foreach"]);let c=PiObject.extractValue(this._scope,"context."+a);if(null==c&&(c=i(a)),null==c&&(c=PiObject.extractValue(this._foreachContext,a)),null==c)throw`ForEach: propriedade não encontrada '${a}'`;let h=[],u=[];var d=document.createTextNode("");this._element.parentNode.insertBefore(d,this._element.nextSibling),o.loop(((t,e,n,r)=>{const i=this._element._componentParent,s=n,o=c[e],a=r;this._setAttributeNodes(l);const d=this._element.cloneNode(!0),p=new PiElement(d,this._scope,i);p.extendForeachContext(this._foreachContext),p._autoBind=!1,p.addForeachContext(s,o),a&&p.addForeachContext(a,e),p.load(i);const f=new PiVirtualTree(d.children,this._scope,i);f.hook("did:create:velement",(t=>{p._children.push(t),t.extendForeachContext(p._foreachContext)})),f.load(),h.push(d),u.push(p)})).end((()=>{for(let t=0;t<h.length;t++){const e=h[t];d.parentNode.insertBefore(e,d)}h=[]})).run(c);const p=function(t,e,n,...r){if(n>0){const r=e+n>u.length?u.length:e+n;for(let t=e;t<r;t++)u[t].destroy();Array.prototype.splice.call(t,e,n),u.splice(e,n)}return r.length>0&&(Array.prototype.splice.call(t,e,0,...r),o.run(t,e)),t};return type_PiType.isArray(c)&&(PiArray.addMethod(c,"load",(function(t,e=0){return p(this,e,0,...t),this})),PiArray.addMethod(c,"add",(function(t){return p(this,this.length,0,t),this})),PiArray.addMethod(c,"clear",(function(){return p(this,0,this.length),this})),PiArray.addMethod(c,"remove",(function(t){return p(this,t,1),this})),PiArray.addMethod(c,"reload",(function(){for(let t=0;t<this.length;t++)u[t].destroy();u=[],o.run(this,0)}))),this._element.parentElement.dispatchEvent(new CustomEvent("fordone",{bubbles:!0,cancelable:!0,composed:!1})),this.destroy(),this}setRenderDirective(t,e,n,r){const i=this._getContext(),s=this._getDefaultVariables(),o=PiStatement.execWithVariables(t,s,i);let a;a=o.name==t?new o:o.call?o.call(r):o,this._loadLoader(),a instanceof Promise?a.then((t=>{this.setComponent(t),t.render(this._element)})):a instanceof PiPromise?a.ok((t=>{this.setComponent(t),t.render(this._element)})):(this.setComponent(a),a.render(this._element))}_getValueFromDefaultVariables(t){const{defaultNames:e,defaultValues:n}=this._getDefaultVariables();for(let r=0;r<e.length;r++){if(e[r]==t)return n[r]}return null}_getDefaultVariables(){const t=this._element._component||this._element._componentParent,n=this._element.get?this._element.get():"",r=["$this","$element","$value"],i=[t,this._element,n];return this._loadDefaultVariables(),e.forEach((t=>{r.push(t.name),i.push(t)})),[this._defaultVariablesNames.concat(r),this._defaultVariablesValues.concat(i)]}_addBindToElementContext(t,e){let n=!1;const r=PiObject.extractValue(this._scope,"context."+t);return this._element.set(r),this._addContextWatch(t,(()=>{if(n)return;const e=PiObject.extractValue(this._scope,"context."+t);this._element.set(e),this._updateView()})),!1!==e?this.listen(e,(function(){n=!0,PiObject.setProperty(this._scope.context,t,this.value),n=!1})):this.listen("change",(function(e){n=!0,PiObject.setProperty(this._scope.context,t,e.detail),n=!1})),this}_getPiAttributeNodes(t=[]){const e=[];for(let n=0;n<this._attrNames.length;n++){const r=this._attrNames[n],i=r[0];-1!=t.indexOf(r)||":"!=i&&"#"!=i&&"@"!=i||e.push(this._element.getAttributeNode(r))}return e}_setAttributeNodes(t=[]){for(let e=0;e<t.length;e++){const n=t[e];null!=n&&this._element.setAttributeNode(n)}return this}setMountDirective(t){return this._element.mount=e=>{const n=new PiExpression(t),r=this._getContext(),i=this._getDefaultVariables(),s=n.parse(r,i);i.$this=e,PiStatement.execWithVariables("this."+s,i,r)},this}setDidMountDirective(){}setWillMountDirective(){}setForEndValueDirective(t,e,n,r){"value"!=n&&"setValue"!=n||this.listen(e,(function(e){const n=new PiExpression(t),r=this._getContext(),i=this._getDefaultVariables();this.value=n.parse(r,i)}))}_loadDirectivesBase(){this.addDirective("for",this.setForDirective),this.addDirective("foreach",this.setForEachDirective),this.addDirective("loader",this.setLoaderDirective),this.addDirective("class",this.setClassDirective),this.addDirective("style",this.setStyleDirective),this.addDirective("init",this.setInitDirective),this.addDirective("bind",this.addBind),this.addDirective("on",this.addEventStatement),this.addDirective("value",this.setValueDirective),this.addDirective("selected",this.setSelectedDirective),this.addDirective("disabled",this.setDisabledDirective),this.addDirective("if",this.setConditionalDirective),this.addDirective("model",this.setModelDirective),this.addDirective("change",this.setChangeDirective),this.addDirective("src",this.setSrcDirective),this.addDirective("checked",this.setCheckedDirective),this.addDirective("mount",this.setMountDirective),this.addDirective("render",this.setRenderDirective),this.addDirective("forend",this.setForEndValueDirective),this.addDirective("fordone",this.setForEndValueDirective)}setLoaderDirective(t,e,n,r){const i=this._getContext(),s=this._getDefaultVariables(),o=PiStatement.execWithVariables(t,s,i);if(o.name==t){(new o).render(this._element)}else if(o.call){o.call(r).render(this._element)}else o.render(this._element);this._hasLoader=!0}_loadLoader(){if(null==this._hasLoader){const t=l.get("html.loader");let e=t;"Function"==t.constructor.name&&(e=t()),this._element.innerHTML=e}}_(t){Object.keys(t);const e=Object.values(t);for(let n=0;n<e.length;n++){const r=e[n];r instanceof Function&&(e[n]=r.bind(t))}}_createExpression(t,e){const n=new PiExpression(t);if(e._piex=n,this._autoBind)for(let t=0;t<n.variables.length;t++){const e=n.variables[t];this._addContextWatch(e,(()=>{this._updateView()}))}}_loadTemplate(){if(this._destroyed)return;const t=this._element.childNodes,e=l.get("expression.xhtml");for(let n=0;n<t.length;n++){let r=t[n],i=r.nodeValue;if(i&&e.test(i)){const t=document.createElement("span");t.innerHTML=i,r.parentNode.insertBefore(t,r.nextSibling),this._element.removeChild(r),this._createExpression(i,t),n--}else i&&i.indexOf("{")>-1&&r instanceof Text&&this._createExpression(i,r)}this._updateView()}_updateConditional(t){const e=this._getContext(),n=this._getDefaultVariables(),r=PiStatement.execWithVariables(t.parse(e,n),n,e),i=this._element.nextElementSibling;i&&i.hasAttribute(":else")&&(i.__pielse=!0,i.removeAttribute(":else"));const s=i&&i.__pielse;r?(this.$.show(),s&&$(i).hide()):(this.$.hide(),s&&$(i).show())}_updateDisabled(t){const e=this._getContext(),n=t.parse(e,this._getDefaultVariables());"true"==n||!0===n?this._element.setAttribute("disabled",!0):this._element.removeAttribute("disabled")}_updateView(){if(this._destroyed)return;const t=this._element.childNodes;for(let e=0;e<t.length;e++){const n=t[e];if(n._piex){const t=n._piex.parse(this._getContext(),this._getDefaultVariables());n instanceof Text?n.nodeValue=t:n.innerHTML=t}}}_updateStyle(){if(!this._destroyed&&this._expressionStyle){const t=this._expressionStyle.parse(this._getContext(),this._getDefaultVariables()).split(";");for(let e=0;e<t.length;e++){const n=t[e].split(":");if(2!=n.length)continue;const r=n[0].trim(),i=n[1].trim();this.$.css(r,i)}}}_updateClass(){if(!this._destroyed&&this._expressionClass){const t=this._expressionClass.parse(this._getContext(),this._getDefaultVariables()).trim();if(t==this._element.className)return;this._element.className="",t.length>0&&this._element.classList.add(...t.split(" ").filter((t=>""!==t)))}}_orderAttributeNames(){let t=this._attrNames.indexOf("foreach");t>-1&&(this._attrNames.splice(t,1),this._attrNames.unshift("foreach")),t=this._attrNames.indexOf("for"),t>-1&&(this._attrNames.splice(t,1),this._attrNames.unshift("for"))}_runDirectives(t){if(!this._destroyed)for(let e=0;e<this._attrNames.length;e++){const n=this._attrNames[e],r=this._element.getAttribute(n),{propName:i,eventName:s}=this._extractPiAttributeNameAndProperty(n);if(this.existDirective(i))this._element.removeAttribute(n),this._directives[i].call(this,r,i,s,t);else{if("foreach"==i)return;if("for"==i)return;if(0!=n.indexOf("#"))if(0!=n.indexOf(":"));else{const t=new PiExpression(r),e=this._getContext(),i=t.variables;let s=t.parse(e,this._getDefaultVariables());if(s&&this._element.setAttribute(n.substr(1),s),this._element.removeAttribute(n),i.length>0)for(let r=0;r<i.length;r++){const o=i[r];this._addContextWatch(o,(()=>{s=t.parse(e,this._getDefaultVariables()),this._element.setAttribute(n.substr(1),s)}))}}else{const t=new PiExpression(r).parse(this._getContext(),this._getDefaultVariables());t&&this._element.setAttribute(n.substr(1),t),this._element.removeAttribute(n)}}}}_extractPiAttributeNameAndProperty(t){let e="",n=!1;if(t.indexOf("@")>-1){e="on",n=t.replace("@","");const r=n.split(":");r.length>1&&(e=r[0],n=r[1])}else if(t.indexOf(":")>-1){e=t.replace(":","");const r=e.split(".");r.length>1&&(e=r[0],n=r[1])}return{propName:e,eventName:n}}_getContext(){return this._scope.context}_clearContextWatch(){let t=[];for(let e=0;e<this._watchs.length;e++)t=t.concat(this._watchs[e].ids);PiObject.off(this._scope,t),this._watchs=[]}_addContextWatch(t,e){const n=PiObject.on(this._scope,"context."+t,e);return this._watchs=this._watchs.concat({property:t,ids:n}),this}_removeContextWatch(t){const e=this._watchs;for(let n=0;n<e.length;n++)if(e[n].property==t){PiObject.off(this._scope,e[n].ids);break}return this}}class PiVirtualTree{#c=null;#h=[];#u=[];#d=[];#p=null;#f=[];#m={context:{}};constructor(t,e={context:{}},n=null){t instanceof Array||t instanceof HTMLCollection?this.#c=t:this.#c=[t],this.#p=n,this.#m=e}hook(t,e){return this.#f[t]=e,this}load(){return this._createVirtualElements(this.#c),this._createComponents(),this}destroy(){for(let t=0;t<this.#h.length;t++){this.#h[t].destroy()}for(let t=0;t<this.#u.length;t++)this.#u[t].destroy();return this.#h=[],this.#u=[],this.#d=[],this}_createComponent(t){const e=i(t);if(null==e)throw`Component não localizado: ${t}`;return new e}_createComponents(){for(let e=0;e<this.#d.length;e++){const n=this.#d[e],r=n.componentName,i=n.velement,s=i._element,o=s.getAttribute("name");var t=null;this.#p&&o?null==(t=this.#p[o])&&(t=this._createComponent(r),this.#p[o]=t):t=this._createComponent(r),i.setComponent(t),t.render(s),this.#u.push(t)}}_createVirtualElements(t){if(null!=t)if(1==t.length&&t[0]instanceof DocumentFragment)this._createVirtualElements(t[0].children);else for(let e=0;e<t.length;e++){const n=t[e];if(!(n instanceof Text)&&!(n instanceof HTMLScriptElement||n instanceof HTMLStyleElement)){if(null==n._pie){this._invokeHook("will:create:velement");const t=new PiElement(n,this.#m,this.#p);if(this._invokeHook("did:create:velement",t),this._invokeHook("will:load:velement",t),t.load(this.#p),this._invokeHook("did:load:velement",t),t.isDestroyed){e--;continue}const r=n.getAttribute("component");null!=r&&this.#d.push({velement:t,componentName:r}),this.#h.push(t)}this._createVirtualElements(n.children)}}}_invokeHook(t,...e){return this.#f[t]&&this.#f[t](...e),this}}class PiBoot extends PiClass{createApp(){return null==s()?(t.app=new PiApp,t.app._scope={context:s}):(t.app=new App,t.app._scope={context:s}),t.app}loadApp(){l.get("app.parse.enable")&&this.#g()}#g(){const t=document.querySelector(l.get("app.parse.selector"));if(null==t)throw`PiBoot: Não foi possível encontrar o elemento pelo seletor informado ${l.get("app.parse.selector")}`;const e=PiTree.parse(t.innerHTML);t.innerHTML="",t.append(e);new PiVirtualTree(t,s()._scope,s()).load(),s().element=t,s().$element=$(t)}}const y=new class PiInitialize{#v=[];#b=[];#y=[];#_=[];#x=!1;boot(t){return this.#b.unshift(t),this}init(t){return this.#y.unshift(t),this}start(t){return this.#_.unshift(t),this}load(){return new Promise((e=>{t.$((()=>{this.#A(this.#b),this.#A(this.#y),this.#A(this.#_),this.#A(this.#v),this.#x=!0,console.log(";)"),e()}))}))}ready(){return new Promise(((t,e)=>{this.#x?t():this.#v.unshift(t)}))}#A(t){for(let e=0;e<t.length;e++)t[e]()}};class PiCallback{#n=[];clear(){return this.#n=[],this}add(t,e,n){return null==this.#n[t]&&(this.#n[t]=[]),this.#n[t].push({name:t,fn:e,ctx:n}),this}remove(t){return this.exist(t)?(this.#n[t]=[],this):this}exist(t){return null!=this.#n[t]}get(t){return this.exist(t)?this.#n[t]:[]}findAll(t){return this.get(t)}trigger(t,...e){let n,r=this.findAll(t);for(let t=0;t<r.length;t++){let i=r[t];n=i.fn.apply(i.ctx,e)}return n}}n(753);class PiEvent{#n=[];listen(t,e,n,r=!1){const i=PiRandom.uuid("xxx-xx");return e.id=i,this.#n.push({uuid:i,event:t,cb:e,ctx:n,once:r}),i}unlisten(t,e="*"){for(let n=this.#n.length-1;n>=0;n--){let r=this.#n[n];if(r.event==t){if(e===r.uuid){this.#n.splice(n,1);break}"*"!=e&&e.id!=r.cb.id||(this.#n.splice(n,1),n--)}}return this}once(t,e,n){return this.listen(t,e,n,!0)}trigger(t,...e){let n=[];for(let r=0;r<this.#n.length;r++)if(this.#n[r].event==t){let t=this.#n[r];t.cb.apply(t.ctx,e),t.once&&n.push(t)}for(let t=n.length-1;t>=0;t--)this.unlisten(n[t].event,n[t].cb);return this}exist(t){for(let e=this.#n.length-1;e>=0;e--)if(this.#n[e].event==t)return!0;return!1}reseed(t,e){return t instanceof PiEvent?(this._reseedAll(e),this):(this.listen(t,(function(){e.trigger.call(e,t,...arguments)})),this)}_reseedAll(t){for(let e=this.#n.length-1;e>=0;e--){const n=this.#n[e].event;this.reseed(n,t)}}clear(){return this.#n=[],this}}class ChainRequestItem{next=null;#w=null;constructor(t){this.#w=t}invoke(){this.#w.call(this.#w,...arguments,(()=>{this.next.invoke(...arguments)}))}}class ChainRequest{#P=[];first(){return 0==this.#P.length?null:this.#P[0]}last(){return 0==this.#P.length?null:this.#P[this.#P.length-1]}add(t){if(null==t)return this;const e=this.last(),n=new ChainRequestItem(t);return null!=e&&(e.next=n),this.#P.push(n),this}invoke(){const t=this.first();return null==t||t.invoke.apply(t,arguments),this}}class PiRequest extends PiClass{#C=!1;#O=null;#E=new ChainRequest;#S="POST";constructor(){super(),this.#E.add(l.get("request.fetch")).add(((t,e,n,r)=>{try{fetch(t,e).then((t=>{this.#C=!1,t.status>=200&&t.status<300?t.text().then((e=>{n(e,t.status)})):t.text().then((e=>{r(e,t.status)})),this.#O=null})).catch((function(t){"Failed to fetch"==t.message&&r(`{ "message": "${t.message}", "status": "error" }`,503)}))}catch(r){r('{ "message": "offline", "status": "error" }',503)}}))}addHandler(t){return this.#E.add(t),this}abort(){return this.#O&&(this.#O.abort(),this.#O=null,this.#C=!1),this}isSending(){return this.#C}setMethod(t){return this.#S=t,this}get(t,e,n=(t=>t)){return new Promise(((r,i)=>{let s="";null!=e&&(s="?"+this.#k(e)),this.#j(t+s,((t,e)=>{r(t,e)}),((t,e)=>{i(t,e)}),n)}))}getJson(t,e,n=(t=>t)){return new Promise(((r,i)=>{let s="";null!=e&&(s="?"+this.#k(e)),this.#j(t+s,((t,e)=>{if(0==t.length)return void r({});let n=JSON.parse(t);this.#D(n)?"ok"==n.status?r(n):i(n.message,e):r(n)}),((t,e)=>{if(0==t.length)return void i({},e);let n=JSON.parse(t);this.#D(n)?"error"==n.status&&i(n.message,e):i(n,e)}),n)}))}post(t,e,n=null){return new Promise(((r,i)=>{let s=this.#k(e);this.#T(t,encodeURI(s),((t,e)=>{r(t,e)}),((t,e)=>{i(t,e)}),(t=>(t.headers.append("Content-Type","application/x-www-form-urlencoded"),n&&n(t),t)))}))}sendFiles(t,e,n=null){return new Promise(((r,i)=>{for(var s=new FormData,o=0;o<e.length;o++)s.append(`file${o}`,e[o]);this.#T(t,s,((t,e)=>{if(0==t.length)return void r({});let n=JSON.parse(t);this.#D(n)?"ok"==n.status?r(n):i(n.message,e):r(n)}),((t,e)=>{if(0==t.length)return void i({},e);let n=JSON.parse(t);this.#D(n)?"error"==n.status&&i(n.message,e):i(n,e)}),(t=>(n&&n(t),t)))}))}postJson(t,e,n=null){return new Promise(((r,i)=>{this.#T(t,JSON.stringify(e),((t,e)=>{if(0==t.length)return void r({});let n=JSON.parse(t);this.#D(n)?"ok"==n.status?r(n):i(n.message,e):r(n)}),((t,e)=>{if(0==t.length)return void i({},e);let n=JSON.parse(t);this.#D(n)?"error"==n.status&&i(n.message,e):i(n,e)}),(t=>(t.headers.append("Content-Type","application/json"),n&&n(t),t)))}))}#j(t,e,n,r){this.#S="GET",this.#I(t,((t,n)=>{e(t,n)}),((t,e)=>{n(t,e)}),(t=>(t.method=this.#S,t.headers.append("X-Requested-With","XMLHttpRequest"),r(t))))}#T(t,e,n,r,i){this.#I(t,((t,e)=>{n(t,e)}),((t,e)=>{r(t,e)}),(t=>(t.method=this.#S,t.headers.append("X-Requested-With","XMLHttpRequest"),t.body=e,i(t))))}#I(t,e,n,r){var i=new Headers;i.append("Accept","application/json, text/plain, */*"),this.#O=new AbortController;var s=r({signal:this.#O.signal,mode:"cors",headers:i}),o=t instanceof PiUrl?t:PiUrl.create(t);this.#C=!0,this.#E.invoke(o,s,e,n)}#D(t){return t.status}#k(t){let e="";for(let n in t)t.hasOwnProperty(n)&&(e.length>0&&(e+="&"),e+=n+"="+t[n]);return e}}class PiAction extends PiClass{#N=new PiRequest;#l=new PiPromise;constructor(t){super(t),this._load()}get promise(){return this.#l}invoke(){return this._callModelMethod.apply(this,arguments)}processErrorResponse(){this.#l.reject.apply(this.#l,arguments)}processSuccessResponse(t,e){if(this._ignore_response)this.#l.resolve(this.model);else if(type_PiType.isArray(t)){const n=[],r=[];for(let e=0;e<t.length;e++){const i=this.model.create().initWithJson(t[e]);i instanceof PiPromise?(i.ok((t=>{n.push(t)})),r.push(i)):n.push(i)}0==r.length?this.#l.resolve(n,e):PiPromise.wait(r).ok((()=>{this.#l.resolve(n,e)}))}else{const n=this.model.create().initWithJson(t);n instanceof PiPromise?n.ok((t=>{this.#l.resolve(t,e)})):this.#l.resolve(n,e)}}_load(){this._parseStmt(this.actionStmt),this._addModelMethod()}_addModelMethod(){var t=this;this._is_static?this.model.constructor[this.actionName]=function(){const e=new PiAction({actionName:t.name,actionStmt:t.stmt,model:t.model.clone()}),n=e.invoke.apply(e,arguments);return new Promise(((t,e)=>{n.ok(t),n.error(e)}))}:this.model[this.actionName]=function(){const e=t.invoke.apply(t,arguments);return new Promise(((t,n)=>{e.ok(t),e.error(n)}))}}_callModelMethod(...t){return this.#l=new PiPromise,type_PiType.isObject(t[0])&&this.model.inject(t[0]),"GET"!=this._method&&"OPTIONS"!=this._method||this._createRequestGet.apply(this,t),"PUT"!=this._method&&"POST"!=this._method&&"DELETE"!=this._method&&"PATH"!=this._method||this._createRequestPost.apply(this,t),this.#l}_createRequestGet(...t){let e=this._createUrl(...t);this.#N.isSending()&&this.#N.abort(),this.model.requestWillGet(e),this.#N.getJson(e).then((t=>{this.model.responseSuccessWillLoad.apply(this.model,[this,e,t.data,t.paging])})).catch((n=>{if(t[0]instanceof TypeError)throw t[0];this.model.responseErrorWillLoad.apply(this.model,[this,e,n.data,n.paging])})),this.model.requestDidGet(e)}_createRequestPost(...t){let e=this._createUrl(...t),n=this.model.toJson();this.#N.isSending()&&this.#N.abort(),this.model.requestWillPost(n,e),this.#N.setMethod(this._method).postJson(e,n).then((t=>{this.model.responseSuccessWillLoad.apply(this.model,[this,e,t.data,t.paging])})).catch(((...t)=>{if(t[0]instanceof TypeError)throw t[0];this.model.responseErrorWillLoad.apply(this.model,[this,e,n.data,n.paging])})),this.model.requestDidPost(n,e)}_createUrl(...t){let e=this._getAction(...t),n="";return n=this.model.getBaseUrl()instanceof PiUrl?PiUrl.create(this.model.getBaseUrl()).path(e):this.model.getBaseUrl().indexOf("http")>-1?PiUrl.create(this.model.getBaseUrl()+e):PiUrl.create("localhost",this.model.getBaseUrl()+e),n}_getAction(...t){let e=0;return this._url.replace(/\:\w+[\(\w*\)]*/gi,(n=>{let r=n.substring(1),i=this.model[r]||"";return 0==t.length?i:(t[e++]||i).toString()}))}_parseStmt(t){const e=t.split(":/"),n=e[0],r=e[1];this._is_static=!1,n.indexOf("static")>-1&&(this._is_static=!0),this._ignore_response=!1,n.indexOf("~")>-1&&(this._ignore_response=!0),this._url=r.length?"/"+r:"",t.toUpperCase().indexOf("GET")>-1?this._method="GET":t.toUpperCase().indexOf("POST")>-1?this._method="POST":t.toUpperCase().indexOf("PUT")>-1?this._method="PUT":t.toUpperCase().indexOf("DELETE")>-1?this._method="DELETE":t.toUpperCase().indexOf("PATH")>-1?this._method="PATH":t.toUpperCase().indexOf("OPTIONS")>-1?this._method="OPTIONS":this._url.indexOf("?")>-1?this._method="GET":this._method="POST"}}class PiModel{#e=null;#B=[];#L=[];#U="";constructor(...t){this.#B=[],this.#L=[],this.#U="",type_PiType.isObject(t[0])&&PiObject.extendAndCall(this,t[0]),this.#e=null==t[0]?{}:t[0],this.init(...t)}getBaseUrl(){return this.#U}_inject(t){for(var e in t)this[e]=t[e];return this}clone(){this.cloneWillLoad();let t=this.toJson(),e=new this.constructor(t);return this.cloneDidLoad(e),e}cloneDidLoad(){}cloneWillLoad(){}static create(...t){return new this(...t)}create(...t){return new this.constructor(...t)}toJson(){this.jsonWillConvert();let t=JSON.parse(JSON.stringify(this));return this.jsonDidConvert(t),t}jsonDidConvert(t){}jsonWillConvert(){}instances(){}init(t){this._loadActions(),this._loadValidations(),this._configUrl(t||this.#e.url||"")}initWithJson(t){return this._inject(t),this}addAction(t,e){const n=new PiAction({actionName:t,actionStmt:e,model:this});return this.#B[t]=n,this}addValidator(t,e){return this.#L[t]=e,this}validators(){return{}}actions(){return{}}setProperty(t,e,n){const r=t.split(".");let i=r.length>1,s=this.#L[t];if("int"===n)e=parseInt(e),isNaN(e)&&(e=0);if(i){let n=r[r.length-1],i=PiObject.extractPropertyContext(this,t);i instanceof PiModel?i.setProperty(n,e):i[n]instanceof Function?i[n](e):i[n]=e}else if(null==s)this[t]instanceof Function?this[t](e):this[t]=e;else{if(s.load(this,t,e),!s.isValid())throw s.label;this[t]=e}return this}save(){return null==this.id||0==this.id?this.insert():this.update()}getAction(t){return this.#B[t]}inject(t,e={}){if(t instanceof PiComponent||t instanceof PiApp){let i=PiString.clips(t.element.innerHTML,'data-model="','"'),s=!1,o=[];e=PiObject.extend({},{invalidInputClass:"invalid-feedback"},e);for(let a=0;a<i.length;a++){let l,c=i[a],h=t.element.querySelector('[data-model="'+c+'"]'),u=h.parentNode;h.firstChild&&h.firstChild._hasComponent?(l=h.firstChild._component.get(),s=!0):h._hasComponent?(l=h._component.get(),s=!0):(s=!1,l=h.get());var n=h.nextElementSibling,r=null;n&&n.hasAttribute("validation-message")?r=n:((r=document.createElement("div")).setAttribute("validation-message",""),u.insertBefore(r,h.nextSibling)),h.setCustomValidity&&h.setCustomValidity(""),r.style.display="none",r.innerHTML="",r.classList.remove(e.invalidInputClass),u.classList.remove("was-validated");try{this.setProperty(c,l,h.getAttribute("data-type"))}catch(t){r.innerHTML=t,r.classList.add(e.invalidInputClass),r.style.display="block",h.setCustomValidity&&h.setCustomValidity(t),s||u.classList.add("was-validated"),o.push(t)}}return o}return t instanceof PiModel?this._inject(t.toJson()):this._inject(t),[]}requestWillGet(t){}jsonDidConvert(t){}requestDidGet(t){}requestWillPost(t){}requestDidPost(t){}responseSuccessWillLoad(t,e,n){this.responseSuccess.apply(this,arguments)}responseSuccess(t,e,...n){t.processSuccessResponse.apply(t,n),this.responseSuccessDidLoad.apply(this,arguments)}responseSuccessDidLoad(){}responseErrorWillLoad(t,e,n){this.responseError.apply(this,arguments)}responseError(t,e,...n){t.processErrorResponse.apply(t,n),this.responseErrorDidLoad.apply(this,arguments)}responseErrorDidLoad(){}_loadActions(){const t=this.actions(),e=PiObject.extend({},{add:"POST:/",insert:"POST:/",update:"PUT:/:id",remove:"REMOVE:/:id",get:"GET:/:id",find:"GET:/find/:id",all:"GET:/"},t);for(let t in e)this.addAction(t,e[t])}_configUrl(t){const e=l.get("model.url");null==e?this.setBaseUrl(t):this.setBaseUrl(e+t)}setBaseUrl(t){return this.#U=null==t?PiUrl.create("localhost").href():t,this}_loadValidations(){const t=this.validators();for(var e in t)this.addValidator(e,t[e])}static register(t){r(t)}}const _=t.$;class PiComponent extends PiClass{event=new PiEvent;#V=[];#R=[];#m=null;#M=null;#F=!1;#W="";constructor(...t){super(...t),this.#m={context:this},this.#W=PiRandom.uuid("xx-xx")}init(...t){super.init(...t),this._loadPromise=new PiPromise,this.willLoad(this._loadPromise)}inject(t){if(t instanceof PiModel){const e=PiString.clips(this.view,'data-model="','"');for(let n=0;n<e.length;n++){const r=e[n],i=this.element.querySelector('[data-model="'+r+'"]'),s=PiObject.extractValue(t,r);i._hasComponent?i._component.set(s):i.firstChild&&i.firstChild._hasComponent?i.firstChild._component.set(s):i.set(s)}}else super.inject(t);return this}get(){return""}set(t){return null==this.element||this.dispatchEvent("change",t),this}dispatchEvent(t,e,n=!0){if(null==this.element)return this;var r=e;return n&&(r=new CustomEvent(t,{bubbles:!0,cancelable:!0,composed:!1,detail:e})),this.#F?this.element.dispatchEvent(r):this.element.parentElement.dispatchEvent(r),this}get $element(){return this.#M?this.#M:this.#M=_(this.element)}render(t,e=!1){return t instanceof _&&(t=t.get(0)),this._loadPromise.once((()=>{this.#$(t),t.mount&&t.mount(this),this.viewWillLoad(),this.viewWillRender(),this.viewRender(t,e),this.viewDidRender(),this.#H(),this.viewDidLoad(),t.didMount&&t.didMount(this),this.element.setAttribute("data-id",this.#W)})),this}get isRendered(){const t=document.querySelector(`[data-id="${this.#W}"]`);return document.contains(t)}willLoad(t){t.resolve()}didLoad(){}viewWillLoad(){}viewWillRender(){}viewDidRender(){}viewRender(t,e=!1){if(e||(t.innerHTML=""),this.view){const e=this.loadView(this.view,t);1==e.length?(this.element=e[0],this.#F=!1):(this.element=t,this.#F=!0)}else this.element=t}viewDidLoad(){}watch(t,e){const n=PiObject.on(this.#m,"context."+t,e);return this.#R=this.#R.concat({property:t,ids:n}),this}unWatch(t){const e=this.#R;for(let n=0;n<e.length;n++)if(e[n].property==t){PiObject.off(this.#m,e[n].ids);break}return this}destroy(){for(let t=0;t<this.#V.length;t++){this.#V[t].destroy()}this.#V=[],this.#q()}loadView(t,e){const n=PiTree.parse(t),r=[];for(;n.childElementCount;){const t=n.children[0];e.append(t),r.push(t)}return this.#G(r),r}#G(t){const e=new PiVirtualTree(t,this.#m,this);e.load(),this.#V.push(e)}#H(){if(null==this.element)return this;const t=this;new MutationObserver((function(e){e.forEach((function(e){if("childList"==e.type)for(var n=0;n<e.addedNodes.length;n++){const r=e.addedNodes[n];t.#G(r)}}))})).observe(this.element,{childList:!0,attributes:!1,characterData:!1,subtree:!1,attributeOldValue:!1,characterDataOldValue:!1})}#q(){let t=[];for(let e=0;e<this.#R.length;e++)t=t.concat(this.#R[e].ids);PiObject.off(this.#m,t),this.#R=[]}#$(t){if(null==t.getAttributeNames)return;const e=t.getAttributeNames();for(let n=0;n<e.length;n++){const r=e[n];let i=t.getAttribute(r);if(-1==r.indexOf("prop-"))continue;type_PiType.isString(i)&&(type_PiType.isObject(i)||type_PiType.isArray(i))&&(i=JSON.parse(i));this[r.replace("prop-","")]=i}}static register(t){r(t)}}function x(t){return x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},x(t)}function A(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,w(r.key),r)}}function w(t){var e=function(t,e){if("object"!=x(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!=x(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==x(e)?e:e+""}function P(t,e,n){return e=E(e),function(t,e){if(e&&("object"==x(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,C()?Reflect.construct(e,n||[],E(t).constructor):e.apply(t,n))}function C(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(C=function(){return!!t})()}function O(){return O="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!{}.hasOwnProperty.call(t,e)&&null!==(t=E(t)););return t}(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(arguments.length<3?t:n):i.value}},O.apply(null,arguments)}function E(t){return E=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},E(t)}function S(t,e){return S=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},S(t,e)}var k=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),P(this,e,arguments)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&S(t,e)}(e,t),n=e,(r=[{key:"init",value:function(){O(E(e.prototype),"init",this).call(this,l.get("endpoint.cifra"))}},{key:"initWithJson",value:function(t){return O(E(e.prototype),"initWithJson",this).call(this,t),this}},{key:"actions",value:function(){return{insert:"POST:/",save:"PUT:/",get:"GET:/:id",all:"GET:/",import:"GET:/import?url=:url"}}}])&&A(n.prototype,r),i&&A(n,i),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r,i}(PiModel);function j(t){return j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},j(t)}function D(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,T(r.key),r)}}function T(t){var e=function(t,e){if("object"!=j(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!=j(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==j(e)?e:e+""}var I=function(){return t=function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.$marcador=e,this.note=null,this.rolagemAutomatica=!0},(e=[{key:"move",value:function(t){var e=this;if(null!=t){var n=t.position(),r=t.width(),i=t.height();this.$marcador.css("top",n.top-2).css("left",n.left-7),this.$marcador.css("width",r+13).css("height",i+4),t.save(),setTimeout((function(){t.highlight()}),200),this.note&&this.note.restore(),this.note=t,setTimeout((function(){e._moveScroll(t)}),200)}}},{key:"setRolagemAutomatica",value:function(t){this.rolagemAutomatica=t}},{key:"show",value:function(){this.$marcador.show()}},{key:"hide",value:function(){this.$marcador.hide()}},{key:"_moveScroll",value:function(t){if(this.rolagemAutomatica){var e=window.innerHeight/2,n=t.position().top-window.scrollY;n>e&&window.scrollBy(0,t.height()/2+n-e);var r=this.$marcador.get(0).getBoundingClientRect();r.top<0&&window.scrollBy(0,r.top-60)}}}])&&D(t.prototype,e),n&&D(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e,n}();function N(t){return N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},N(t)}function B(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,L(r.key),r)}}function L(t){var e=function(t,e){if("object"!=N(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!=N(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==N(e)?e:e+""}var U=function(){return t=function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.$note=e},(e=[{key:"highlight",value:function(){this.$note.css("color","white")}},{key:"restore",value:function(){this.$note.css("color",this.$note.attr("data-color"))}},{key:"save",value:function(){this.$note.attr("data-color",this.$note.css("color"))}},{key:"position",value:function(){return this.$note.position()}},{key:"width",value:function(){return this.$note.width()}},{key:"height",value:function(){return this.$note.height()}},{key:"$element",get:function(){return this.$note}}])&&B(t.prototype,e),n&&B(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e,n}();function V(t){return V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},V(t)}function R(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,M(r.key),r)}}function M(t){var e=function(t,e){if("object"!=V(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!=V(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==V(e)?e:e+""}function F(t,e,n){return e=G(e),function(t,e){if(e&&("object"==V(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,H()?Reflect.construct(e,n||[],G(t).constructor):e.apply(t,n))}function W(t){var e="function"==typeof Map?new Map:void 0;return W=function(t){if(null===t||!function(t){try{return-1!==Function.toString.call(t).indexOf("[native code]")}catch(e){return"function"==typeof t}}(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return function(t,e,n){if(H())return Reflect.construct.apply(null,arguments);var r=[null];r.push.apply(r,e);var i=new(t.bind.apply(t,r));return n&&q(i,n.prototype),i}(t,arguments,G(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),q(n,t)},W(t)}function H(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(H=function(){return!!t})()}function q(t,e){return q=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},q(t,e)}function G(t){return G=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},G(t)}var J=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),n=F(this,e),t.get().forEach((function(t,e){n.push(new U($(t)))})),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&q(t,e)}(e,t),n=e,(r=[{key:"getNoteByPosition",value:function(t){return this[t-1]}}])&&R(n.prototype,r),i&&R(n,i),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r,i}(W(Array)),z=n(72),Q=n.n(z),X=n(825),Y=n.n(X),K=n(659),Z=n.n(K),tt=n(56),et=n.n(tt),nt=n(540),rt=n.n(nt),it=n(113),st=n.n(it),ot=n(141),at={};at.styleTagTransform=st(),at.setAttributes=et(),at.insert=Z().bind(null,"head"),at.domAPI=Y(),at.insertStyleElement=rt();Q()(ot.A,at);ot.A&&ot.A.locals&&ot.A.locals;function lt(t){return lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},lt(t)}function ct(t){throw new TypeError('"'+t+'" is read-only')}function ht(){ht=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,i=Object.defineProperty||function(t,e,n){t[e]=n.value},s="function"==typeof Symbol?Symbol:{},o=s.iterator||"@@iterator",a=s.asyncIterator||"@@asyncIterator",l=s.toStringTag||"@@toStringTag";function c(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,n){return t[e]=n}}function h(t,e,n,r){var s=e&&e.prototype instanceof v?e:v,o=Object.create(s.prototype),a=new j(r||[]);return i(o,"_invoke",{value:O(t,n,a)}),o}function u(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var d="suspendedStart",p="suspendedYield",f="executing",m="completed",g={};function v(){}function b(){}function y(){}var _={};c(_,o,(function(){return this}));var x=Object.getPrototypeOf,A=x&&x(x(D([])));A&&A!==n&&r.call(A,o)&&(_=A);var w=y.prototype=v.prototype=Object.create(_);function P(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function C(t,e){function n(i,s,o,a){var l=u(t[i],t,s);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==lt(h)&&r.call(h,"__await")?e.resolve(h.__await).then((function(t){n("next",t,o,a)}),(function(t){n("throw",t,o,a)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return n("throw",t,o,a)}))}a(l.arg)}var s;i(this,"_invoke",{value:function(t,r){function i(){return new e((function(e,i){n(t,r,e,i)}))}return s=s?s.then(i,i):i()}})}function O(e,n,r){var i=d;return function(s,o){if(i===f)throw Error("Generator is already running");if(i===m){if("throw"===s)throw o;return{value:t,done:!0}}for(r.method=s,r.arg=o;;){var a=r.delegate;if(a){var l=E(a,r);if(l){if(l===g)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(i===d)throw i=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);i=f;var c=u(e,n,r);if("normal"===c.type){if(i=r.done?m:p,c.arg===g)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(i=m,r.method="throw",r.arg=c.arg)}}}function E(e,n){var r=n.method,i=e.iterator[r];if(i===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,E(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var s=u(i,e.iterator,n.arg);if("throw"===s.type)return n.method="throw",n.arg=s.arg,n.delegate=null,g;var o=s.arg;return o?o.done?(n[e.resultName]=o.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,g):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function k(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function D(e){if(e||""===e){var n=e[o];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,s=function n(){for(;++i<e.length;)if(r.call(e,i))return n.value=e[i],n.done=!1,n;return n.value=t,n.done=!0,n};return s.next=s}}throw new TypeError(lt(e)+" is not iterable")}return b.prototype=y,i(w,"constructor",{value:y,configurable:!0}),i(y,"constructor",{value:b,configurable:!0}),b.displayName=c(y,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,y):(t.__proto__=y,c(t,l,"GeneratorFunction")),t.prototype=Object.create(w),t},e.awrap=function(t){return{__await:t}},P(C.prototype),c(C.prototype,a,(function(){return this})),e.AsyncIterator=C,e.async=function(t,n,r,i,s){void 0===s&&(s=Promise);var o=new C(h(t,n,r,i),s);return e.isGeneratorFunction(n)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},P(w),c(w,l,"Generator"),c(w,o,(function(){return this})),c(w,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=D,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(k),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function i(r,i){return a.type="throw",a.arg=e,n.next=r,i&&(n.method="next",n.arg=t),!!i}for(var s=this.tryEntries.length-1;s>=0;--s){var o=this.tryEntries[s],a=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=r.call(o,"catchLoc"),c=r.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var s=i;break}}s&&("break"===t||"continue"===t)&&s.tryLoc<=e&&e<=s.finallyLoc&&(s=null);var o=s?s.completion:{};return o.type=t,o.arg=e,s?(this.method="next",this.next=s.finallyLoc,g):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),k(n),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;k(n)}return i}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:D(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),g}},e}function ut(t,e,n,r,i,s,o){try{var a=t[s](o),l=a.value}catch(t){return void n(t)}a.done?e(l):Promise.resolve(l).then(r,i)}function dt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,bt(r.key),r)}}function pt(t,e,n){return e=mt(e),function(t,e){if(e&&("object"==lt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,ft()?Reflect.construct(e,n||[],mt(t).constructor):e.apply(t,n))}function ft(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(ft=function(){return!!t})()}function mt(t){return mt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},mt(t)}function gt(t,e){return gt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},gt(t,e)}function vt(t,e,n){return(e=bt(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function bt(t){var e=function(t,e){if("object"!=lt(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!=lt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==lt(e)?e:e+""}var yt=function(t){function e(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return vt(t=pt(this,e,[].concat(r)),"view",'<div :class="cifra-view {@_mostrarAcordes ?  \'\' : \'no-chords\'}">\n        <div class="titulo">\n            {@_titulo}\n        </div>\n\n        <div class="options">\n            <div class="form-check form-switch">\n                <input class="form-check-input" type="checkbox" id="mostrarAcordes" @change="_saveMostrarAcordes($value)" :checked="{@_mostrarAcordes}">\n                <label class="form-check-label" for="mostrarAcordes">Mostrar Acordes</label>\n            </div>\n\n            <div class="form-check form-switch">\n                <input class="form-check-input" type="checkbox" id="barraRolagem" @change="_saveRolagemAutomatica($value)" :checked="{@_rolagemAutomatica}">\n                <label class="form-check-label" for="barraRolagem">Barra de Rolagem Automática</label>\n            </div>\n\n            <div class="form-check form-switch">\n                <input class="form-check-input" type="checkbox" id="evidenciar" @change="_saveEvidenciarNotas($value)" :checked="{@_evidenciarAcordes}">\n                <label class="form-check-label" for="evidenciar">Evidênciar acordes</label>\n            </div>\n        </div>\n\n        <div class="center"></div>\n\n        <div id="marcador" class="marcador"></div>\n        \n        <pre id="content"></pre>\n\n        <div style="padding: 1px 10px; border-radius: 3px; position: fixed; background-color: rgba(0, 0, 0, 0.05); bottom: 0px; right: 3px;">v0.1.1</div>\n    </div>'),vt(t,"_titulo",""),vt(t,"_mostrarAcordes",!0),vt(t,"_rolagemAutomatica",!0),vt(t,"_evidenciarAcordes",!0),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&gt(t,e)}(e,t),n=e,r=[{key:"viewDidLoad",value:function(){this._loadConfig(),this._loadMarcador()}},{key:"setStream",value:function(t){var e=this;t.onNewNote((function(t){e.setMarcadorPosicao(t.position)}))}},{key:"loadCifra",value:(s=ht().mark((function t(e,n){var r;return ht().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(new k).get(e);case 2:r=t.sent,this.setCifra(r,n);case 4:case"end":return t.stop()}}),t,this)})),o=function(){var t=this,e=arguments;return new Promise((function(n,r){var i=s.apply(t,e);function o(t){ut(i,n,r,o,a,"next",t)}function a(t){ut(i,n,r,o,a,"throw",t)}o(void 0)}))},function(t,e){return o.apply(this,arguments)})},{key:"setCifra",value:function(t,e){this.$element.find("#content").html(this._formatNotes(this._formatTag(t.texto))),this._titulo=t.titulo,this._loadNotes(),this._loadConfig(),this.setMarcadorPosicao(0),e&&e()}},{key:"setMarcadorPosicao",value:function(t){this.marcador.move(this.notes.getNoteByPosition(t))}},{key:"_saveMostrarAcordes",value:function(t){this._mostrarAcordes=t,this._saveConfig()}},{key:"_saveRolagemAutomatica",value:function(t){this._rolagemAutomatica=t,this.marcador&&this.marcador.setRolagemAutomatica(t),this._saveConfig()}},{key:"_saveEvidenciarNotas",value:function(t){this._evidenciarAcordes=t,this.marcador&&(t?this.marcador.show():this.marcador.hide()),this._saveConfig()}},{key:"_formatNotes",value:function(t){return t.replace(/\([^)]+\)/gi,(function(t){return"<b>".concat(t.replace("(","").replace(")",""),"</b>")}))}},{key:"_formatTag",value:function(t){return t.replace(/\[[^\]]+\]/gi,(function(t){return"<i>".concat(t,"</i>")}))}},{key:"_loadMarcador",value:function(){this.marcador=new I(this.$element.find("#marcador"))}},{key:"_loadNotes",value:function(){this.notes=new J(this.$element.find("#content").find("b"))}},{key:"_saveConfig",value:function(){window.localStorage.setItem("mostrar_acordes",this._mostrarAcordes),window.localStorage.setItem("rolagem_automatica",this._rolagemAutomatica),window.localStorage.setItem("evidenciar_acordes",this._evidenciarAcordes)}},{key:"_loadConfig",value:function(){var t=this._getConfig();this._saveMostrarAcordes(t.mostrarAcordes),this._saveRolagemAutomatica(t.rolagemAutomatica),this._saveEvidenciarNotas(t.evidenciarAcordes)}},{key:"_getConfig",value:function(){var t=window.localStorage.getItem("mostrar_acordes"),e=window.localStorage.getItem("rolagem_automatica"),n=window.localStorage.getItem("evidenciar_acordes");return null!==t&&null!==e&&null!==n||(this._saveConfig(),ct("mostrarAcordes"),ct("rolagemAutomatica"),ct("evidenciarAcordes")),{mostrarAcordes:"true"===t,rolagemAutomatica:"true"===e,evidenciarAcordes:"true"===n}}}],r&&dt(n.prototype,r),i&&dt(n,i),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r,i,s,o}(PiComponent);PiComponent.register(yt);var _t=n(284),xt={};xt.styleTagTransform=st(),xt.setAttributes=et(),xt.insert=Z().bind(null,"head"),xt.domAPI=Y(),xt.insertStyleElement=rt();Q()(_t.A,xt);_t.A&&_t.A.locals&&_t.A.locals;function At(t){return At="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},At(t)}function wt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,St(r.key),r)}}function Pt(t,e,n){return e=Ot(e),function(t,e){if(e&&("object"==At(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,Ct()?Reflect.construct(e,n||[],Ot(t).constructor):e.apply(t,n))}function Ct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(Ct=function(){return!!t})()}function Ot(t){return Ot=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ot(t)}function Et(t,e){return Et=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Et(t,e)}function St(t){var e=function(t,e){if("object"!=At(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!=At(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==At(e)?e:e+""}var kt=function(t){function e(){var t,n,r,i;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var s=arguments.length,o=new Array(s),a=0;a<s;a++)o[a]=arguments[a];return t=Pt(this,e,[].concat(o)),n=t,i='<div class="cifra-preview">\n        <div class="box">\n            <div class="box-inner"></div>\n        </div>\n    </div>',(r=St(r="view"))in n?Object.defineProperty(n,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[r]=i,t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Et(t,e)}(e,t),n=e,r&&wt(n.prototype,r),i&&wt(n,i),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r,i}(PiComponent);function jt(t){return jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},jt(t)}function Dt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,It(r.key),r)}}function Tt(t,e,n){return(e=It(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function It(t){var e=function(t,e){if("object"!=jt(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!=jt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==jt(e)?e:e+""}var Nt=function(){return t=function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),Tt(this,"fnNewCifra",null),Tt(this,"fnNewNote",null),this.host=e},e=[{key:"onNewCifra",value:function(t){this.fnNewCifra=t}},{key:"onNewNote",value:function(t){this.fnNewNote=t}},{key:"_processEvent",value:function(t){var e=this;try{var n=JSON.parse(t.data);if("new:cifra"==n.type)return void(new k).get(n.id).then((function(t){e.fnNewCifra&&e.fnNewCifra(t)}));"note"==n.type&&this.fnNewNote&&this.fnNewNote(n.note)}catch(t){}}},{key:"connect",value:function(){var t=this,e=new WebSocket(this.host);e.addEventListener("open",(function(t){console.log("Conectado ao servidor WebSocket"),e.send("Olá servidor!")})),e.addEventListener("message",(function(e){t._processEvent(e)})),e.addEventListener("close",(function(e){console.log("Desconectado do servidor WebSocket"),t.connect()}))}}],e&&Dt(t.prototype,e),n&&Dt(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e,n}();function Bt(t){return Bt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Bt(t)}function Lt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,Ut(r.key),r)}}function Ut(t){var e=function(t,e){if("object"!=Bt(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!=Bt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==Bt(e)?e:e+""}function Vt(t,e,n){return e=Ft(e),function(t,e){if(e&&("object"==Bt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,Rt()?Reflect.construct(e,n||[],Ft(t).constructor):e.apply(t,n))}function Rt(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(Rt=function(){return!!t})()}function Mt(){return Mt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!{}.hasOwnProperty.call(t,e)&&null!==(t=Ft(t)););return t}(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(arguments.length<3?t:n):i.value}},Mt.apply(null,arguments)}function Ft(t){return Ft=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ft(t)}function Wt(t,e){return Wt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Wt(t,e)}var $t=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),Vt(this,e,arguments)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Wt(t,e)}(e,t),n=e,(r=[{key:"init",value:function(){Mt(Ft(e.prototype),"init",this).call(this,l.get("endpoint.transporte"))}},{key:"actions",value:function(){return{get:"GET:/"}}}])&&Lt(n.prototype,r),i&&Lt(n,i),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r,i}(PiModel),Ht=n(884),qt={};qt.styleTagTransform=st(),qt.setAttributes=et(),qt.insert=Z().bind(null,"head"),qt.domAPI=Y(),qt.insertStyleElement=rt();Q()(Ht.A,qt);Ht.A&&Ht.A.locals&&Ht.A.locals;function Gt(t){return Gt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Gt(t)}function Jt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,Kt(r.key),r)}}function zt(t,e,n){return e=Xt(e),function(t,e){if(e&&("object"==Gt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,Qt()?Reflect.construct(e,n||[],Xt(t).constructor):e.apply(t,n))}function Qt(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(Qt=function(){return!!t})()}function Xt(t){return Xt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Xt(t)}function Yt(t,e){return Yt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Yt(t,e)}function Kt(t){var e=function(t,e){if("object"!=Gt(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!=Gt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==Gt(e)?e:e+""}var Zt=function(t){function e(){var t,n,r,i;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var s=arguments.length,o=new Array(s),a=0;a<s;a++)o[a]=arguments[a];return t=zt(this,e,[].concat(o)),n=t,i='<div class="container homepage">\n        <div class="content">\n            <div id="view"></div>\n        </div>\n    </div>',(r=Kt(r="view"))in n?Object.defineProperty(n,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[r]=i,t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Yt(t,e)}(e,t),n=e,(r=[{key:"instances",value:function(){this.cifraStream=new Nt(l.get("cifraStream"))}},{key:"viewDidLoad",value:function(){this.cifraStream.connect(),this._loadTransporte(),this._loadEvents()}},{key:"setView",value:function(t){t.render(this.$element.find("#view"))}},{key:"_loadTransporte",value:function(){var t=this;(new $t).get().then((function(e){if(null!=e)if(0!=e.cifraId){var n=new yt;t.setView(n),n.setStream(t.cifraStream),n.loadCifra(e.cifraId,(function(){n.setMarcadorPosicao(e.posicao),n.setMarcadorPosicao(0)}))}else t.setView(new kt);else t.setView(new kt)}))}},{key:"_loadEvents",value:function(){var t=this;this.cifraStream.onNewCifra((function(e){var n=new yt;t.setView(n),n.setStream(t.cifraStream),n.setCifra(e)}))}}])&&Jt(n.prototype,r),i&&Jt(n,i),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,r,i}(PiComponent),te=n(362),ee={};ee.styleTagTransform=st(),ee.setAttributes=et(),ee.insert=Z().bind(null,"head"),ee.domAPI=Y(),ee.insertStyleElement=rt();Q()(te.A,ee);te.A&&te.A.locals&&te.A.locals;var ne;window.appSettings&&l.load(appSettings),void 0!==window.localStorage&&void 0!==window.sessionStorage||(ne=function(t){function e(t,e,n){var r;if(n){var i=new Date;i.setTime(i.getTime()+24*n*60*60*1e3),r="; expires="+i.toGMTString()}else r="";document.cookie=t+"="+e+r+"; path=/"}return{setItem:function(t,n){e(t,n,365)},getItem:function(t){return function(t){for(var e=t+"=",n=document.cookie.split(";"),r=0;r<n.length;r++){for(var i=n[r];" "==i.charAt(0);)i=i.substring(1,i.length);if(0==i.indexOf(e))return i.substring(e.length,i.length)}return null}(t)},removeItem:function(t){e(t,"",-1)},clear:function(){!function(){for(var t=document.cookie.split(";"),e=0;e<t.length;e++){var n=t[e],r=n.indexOf("="),i=r>-1?n.substr(0,r):n;document.cookie=i+"=;expires=Thu, 01 Jan 1970 00:00:00 GMT"}}()}}},window.localStorage=new ne("local"),window.sessionStorage=new ne("session")),l.set("request.fetch",(function(t,e,n,r,i){i()})),(new class Bootstrap{#J=new PiCallback;onInit(t){return this.#J.add("init",t),this}onLoad(t){return this.#J.add("load",t),this}onReady(t){return this.#J.add("ready",t),this}async load(){const t=new PiBoot;let e=null;y.init((()=>{this.#J.trigger("init",e),e=t.createApp()})).start((()=>{this.#J.trigger("load",e),t.loadApp(),this.#J.trigger("ready",e)})),await y.load()}}).onLoad((function(t){})).onReady((function(e){var n=new Zt;n.render(t.app.$element),n.setView(new yt)})).load()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,